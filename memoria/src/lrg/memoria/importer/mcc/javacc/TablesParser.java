/* Generated By:JavaCC: Do not edit this line. TablesParser.java */
package lrg.memoria.importer.mcc.javacc;

import lrg.common.utils.ProgressObserver;
import lrg.memoria.importer.mcc.loader.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;

public class TablesParser implements TablesParserConstants {
    private FileInputStream fisAccess;
    private FileInputStream fisBody;
    private FileInputStream fisCall;
    private FileInputStream fisChains;
    private FileInputStream fisFuncs;
    private FileInputStream fisInh;
    private FileInputStream fisNamespaces;
    private FileInputStream fisPackages;
    private FileInputStream fisTp2t;
    private FileInputStream fisTypes;
    private FileInputStream fisVars;
    private ProgressObserver progressObserver;

    static private TypeVisitor tt;
    static private Tp2tVisitor tp2t;

    private String currentPath;
    private static ArrayList temp;
    static private int currentTypesLine;
    static private int currentFuncsLine;
    static private int currentVarsLine;
    static private int currentCallLine;
    static private int currentAccessLine;
    static private int currentBodyLine;
    static private int currentChainsLine;
    static private int currentNamespacesLine;
    static private int currentPackagesLine;
    static private int currentTp2TLine;
    static private int currentInhLine;

    static private final int ACCESS_STEP = 1000;
    static private final int BODY_STEP = 500;
    static private final int CALL_STEP = 1000;
    static private final int CHAINS_STEP = 50;
    static private final int FUNCS_STEP = 500;
    static private final int INH_STEP = 50;
    static private final int NAMESPACES_STEP = 25;
    static private final int PACKAGES_STEP = 25;
    static private final int TP2T_STEP = 25;
    static private final int TYPES_STEP = 100;
    static private final int VARS_STEP = 1000;

    public TablesParser(String path, ProgressObserver po) throws FileNotFoundException {
        progressObserver = po;
        currentPath = path;

        fisAccess = new FileInputStream(new File(path + File.separatorChar + "access.dat"));
        fisBody = new FileInputStream(new File(path + File.separatorChar + "body.dat"));
        fisCall = new FileInputStream(new File(path + File.separatorChar + "call.dat"));
        fisChains = new FileInputStream(new File(path + File.separatorChar + "chains.dat"));
        fisFuncs = new FileInputStream(new File(path + File.separatorChar + "funcs.dat"));
        fisInh = new FileInputStream(new File(path + File.separatorChar + "inh.dat"));
        fisNamespaces = new FileInputStream(new File(path + File.separatorChar + "namespaces.dat"));
        fisPackages = new FileInputStream(new File(path + File.separatorChar + "packages.dat"));
        fisTp2t = new FileInputStream(new File(path + File.separatorChar + "tp2t.dat"));
        fisTypes = new FileInputStream(new File(path + File.separatorChar + "types.dat"));
        fisVars = new FileInputStream(new File(path + File.separatorChar + "vars.dat"));

        if (progressObserver != null)
            progressObserver.setMaxValue(11);

        //start with the 'packages' table
        /*if (jj_initialized_once) {
          System.out.println("ERROR: Second call to constructor of static parser.  You must");
          System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
          System.out.println("       during parser generation.");
          throw new Error();
        }

        jj_initialized_once = true;
        */

        jj_input_stream = new SimpleCharStream(fisPackages, 1, 1);
        token_source = new TablesParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;

        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void parseTables() throws ParseException {
        currentTypesLine = currentFuncsLine = currentVarsLine = currentCallLine = 0;
        currentAccessLine = currentBodyLine = currentChainsLine = currentNamespacesLine = 0;
        currentPackagesLine = currentTp2TLine = currentInhLine = 0;

        System.out.println("Parsing table " + currentPath + File.separatorChar + "packages.dat (DOT = " + PACKAGES_STEP + ")");
        parsePackagesLines();
        if (progressObserver != null)
            progressObserver.increment();

        ReInit(fisNamespaces);
        System.out.println("\nParsing table " + currentPath + File.separatorChar + "namespaces.dat (DOT = " + ACCESS_STEP + ")");
        parseNamespacesLines();
        if (progressObserver != null)
            progressObserver.increment();

        ReInit(fisBody);
        System.out.println("\nParsing table " + currentPath + File.separatorChar + "body.dat (DOT = " + BODY_STEP + ")");
        parseBodyLines();
        if (progressObserver != null)
            progressObserver.increment();

        ReInit(fisTypes);
        System.out.println("\nParsing table " + currentPath + File.separatorChar + "types.dat (DOT = " + TYPES_STEP + ")");
        parseTypesLines();
        if (progressObserver != null)
            progressObserver.increment();

        ReInit(fisTp2t);
        System.out.println("\nParsing table " + currentPath + File.separatorChar + "tp2t.dat (DOT = " + TP2T_STEP + ")");
        parseTp2tLines();
        if (progressObserver != null)
            progressObserver.increment();

        ReInit(fisInh);
        System.out.println("\nParsing table " + currentPath + File.separatorChar + "inh.dat (DOT = " + INH_STEP + ")");
        parseInhLines();
        if (progressObserver != null)
            progressObserver.increment();

        ReInit(fisFuncs);
        System.out.println("\nParsing table " + currentPath + File.separatorChar + "funcs.dat (DOT = " + FUNCS_STEP + ")");
        parseFuncsLines();
        if (progressObserver != null)
            progressObserver.increment();

        ReInit(fisVars);
        System.out.println("\nParsing table " + currentPath + File.separatorChar + "vars.dat (DOT = " + VARS_STEP + ")");
        parseVarsLines();
        if (progressObserver != null)
            progressObserver.increment();

        ReInit(fisAccess);
        System.out.println("\nParsing table " + currentPath + File.separatorChar + "access.dat (DOT = " + ACCESS_STEP + ")");
        parseAccessLines();
        if (progressObserver != null)
            progressObserver.increment();

        ReInit(fisCall);
        System.out.println("\nParsing table " + currentPath + File.separatorChar + "call.dat (DOT = " + CALL_STEP + ")");
        parseCallLines();
        if (progressObserver != null)
            progressObserver.increment();

        ReInit(fisChains);
        System.out.println("\nParsing table " + currentPath + File.separatorChar + "chains.dat (DOT = " + CHAINS_STEP + ")");
        parseChainsLines();
        if (progressObserver != null)
            progressObserver.increment();
    }

    private static void advanceProgressCounter(String table) {
        if (table.equals("namespaces") && currentNamespacesLine % NAMESPACES_STEP == 0)
            System.out.print(".");
        if (table.equals("packages") && currentPackagesLine % PACKAGES_STEP == 0)
            System.out.print(".");
        if (table.equals("types") && currentTypesLine % TYPES_STEP == 0)
            System.out.print(".");
        if (table.equals("inh") && currentInhLine % INH_STEP == 0)
            System.out.print(".");
        if (table.equals("funcs") && currentFuncsLine % FUNCS_STEP == 0)
            System.out.print(".");
        if (table.equals("vars") && currentVarsLine % VARS_STEP == 0)
            System.out.print(".");
        if (table.equals("calls") && currentCallLine % CALL_STEP == 0)
            System.out.print(".");
        if (table.equals("accesses") && currentAccessLine % ACCESS_STEP == 0)
            System.out.print(".");
        if (table.equals("bodies") && currentBodyLine % BODY_STEP == 0)
            System.out.print(".");
        if (table.equals("chains") && currentChainsLine % CHAINS_STEP == 0)
            System.out.print(".");
        if (table.equals("tp2t") && currentTp2TLine % TP2T_STEP == 0)
            System.out.print(".");
    }

    boolean error_recovery(ParseException e) throws ParseException {
        System.out.println(e);
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != EOLN && t.kind != EOF);
        if (t.kind == EOF)
            return true;
        return false;
    }

    final public void parsePackagesLines() throws ParseException {
        boolean eof = false;
        label_1:
        while (true) {
            if (jj_2_1(2)) {
                ;
            } else {
                break label_1;
            }
            eof = parsePackagesLine();
            if (eof) {
                if (true) return;
            }
            currentPackagesLine++;
            advanceProgressCounter("packages");
        }
    }

    final public boolean parsePackagesLine() throws ParseException {
        PackageVisitor tt = new DefaultPackageVisitor();
        Token t;
        try {
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setId(new Integer(t.image));
            t = jj_consume_token(STRING);
            tt.setName(t.image);
            t = jj_consume_token(EOLN);
            tt.addPackage();
            {
                if (true) return false;
            }
        } catch (ParseException e) {
            {
                if (true) return error_recovery(e);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void parseNamespacesLines() throws ParseException {
        boolean eof = false;
        label_2:
        while (true) {
            if (jj_2_2(2)) {
                ;
            } else {
                break label_2;
            }
            eof = parseNamespacesLine();
            if (eof) {
                if (true) return;
            }
            currentNamespacesLine++;
            advanceProgressCounter("namespaces");
        }
    }

    final public boolean parseNamespacesLine() throws ParseException {
        NamespaceVisitor tt = new DefaultNamespaceVisitor();
        Token t;
        try {
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setId(new Integer(t.image));
            t = jj_consume_token(STRING);
            tt.setName(t.image);
            t = jj_consume_token(EOLN);
            tt.addNamespace();
            {
                if (true) return false;
            }
        } catch (ParseException e) {
            {
                if (true) return error_recovery(e);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void parseTypesLines() throws ParseException {
        tt = new DefaultTypeVisitor();
        boolean eof = false;
        label_3:
        while (true) {
            if (jj_2_3(2)) {
                ;
            } else {
                break label_3;
            }

            eof = parseTypesLine();
            if (eof) {
                if (true) return;
            }
            currentTypesLine++;
            //System.out.println(currentTypesLine);
            advanceProgressCounter("types");
        }
    }

    final public boolean parseTypesLine() throws ParseException {
        Token t, t1, t2;
        try {
            if (jj_2_30(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
                tt.setId(new Integer(t.image));
                if (jj_2_4(2)) {
                    t = jj_consume_token(STRING);
                } else if (jj_2_5(2)) {
                    t = jj_consume_token(NULL);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                if (jj_2_6(2)) {
                    t1 = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_7(2)) {
                    t1 = jj_consume_token(NULL);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                if (jj_2_8(2)) {
                    t2 = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_9(2)) {
                    t2 = jj_consume_token(NULL);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                tt.setLocation(t.image, t1.image, t2.image);
                t = jj_consume_token(STRING);
                tt.setName(t.image);
                t = jj_consume_token(STRING);
                tt.setKind(t.image);
                if (jj_2_10(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_11(2)) {
                    t = jj_consume_token(NULL);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                tt.setPackageId(t.image);
                if (jj_2_12(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_13(2)) {
                    t = jj_consume_token(NULL);
                } else if (jj_2_14(2)) {
                    t = jj_consume_token(NO_ONE);
                } else if (jj_2_15(2)) {
                    t = jj_consume_token(ERROR);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                tt.setNamespaceId(t.image);
                if (jj_2_16(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_17(2)) {
                    t = jj_consume_token(NULL);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                tt.setIsAbstract(t.image);
                if (jj_2_18(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_19(2)) {
                    t = jj_consume_token(NULL);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                tt.setIsInterface(t.image);
                if (jj_2_20(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_21(2)) {
                    t = jj_consume_token(NULL);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                tt.setIsGeneric(t.image);
                if (jj_2_22(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_23(2)) {
                    t = jj_consume_token(NULL);
                } else if (jj_2_24(2)) {
                    t = jj_consume_token(NO_ONE);
                } else if (jj_2_25(2)) {
                    t = jj_consume_token(ERROR);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                tt.setScopeId(t.image);
                if (jj_2_26(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_27(2)) {
                    t = jj_consume_token(NULL);
                } else if (jj_2_28(2)) {
                    t = jj_consume_token(NO_ONE);
                } else if (jj_2_29(2)) {
                    t = jj_consume_token(NOT_INIT);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                tt.setDecoratedType(t.image);
                t = jj_consume_token(EOLN);
                tt.addType();
                {
                    if (true) return false;
                }
            } else if (jj_2_31(2)) {
                jj_consume_token(0);
                tt.typesEOF();
                {
                    if (true) return true;
                }
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (ParseException e) {
            boolean eof = error_recovery(e);
            if (eof) tt.typesEOF();
            {
                if (true) return eof;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void parseTp2tLines() throws ParseException {
        tp2t = new DefaultTp2tVisitor();
        boolean eof = false;
        label_4:
        while (true) {
            if (jj_2_32(2)) {
                ;
            } else {
                break label_4;
            }
            parseTp2tLine();
            if (eof) {
                if (true) return;
            }
            currentTp2TLine++;
            advanceProgressCounter("tp2t");
        }
    }

    final public boolean parseTp2tLine() throws ParseException {
        Token t, t1, t2;
        try {
            t = jj_consume_token(INTEGER_NUMBER);
            tp2t.setId(t.image);
            if (jj_2_33(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_34(2)) {
                t = jj_consume_token(UNKNOWN);
            } else if (jj_2_35(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            tp2t.setTemplateParamID(t.image);
            if (jj_2_36(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_37(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            tp2t.setInstantiationTypeID(t.image);
            t = jj_consume_token(EOLN);
            tp2t.addInstantiation();
            {
                if (true) return false;
            }
        } catch (ParseException e) {
            {
                if (true) return error_recovery(e);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void parseFuncsLines() throws ParseException {
        boolean eof;
        label_5:
        while (true) {
            if (jj_2_38(2)) {
                ;
            } else {
                break label_5;
            }
            eof = parseFuncsLine();
            if (eof) {
                if (true) return;
            }
            currentFuncsLine++;
            advanceProgressCounter("funcs");
        }
    }

    final public boolean parseFuncsLine() throws ParseException {
        FunctionVisitor tt = new DefaultFunctionVisitor();
        Token t;
        try {
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setId(new Integer(t.image));
            if (jj_2_39(2)) {
                t = jj_consume_token(STRING);
            } else if (jj_2_40(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            tt.setName(t.image);
            t = jj_consume_token(STRING);
            tt.setKind(t.image);
            t = jj_consume_token(STRING);
            tt.setSignature(t.image);
            if (jj_2_41(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_42(2)) {
                t = jj_consume_token(NO_ONE);
            } else if (jj_2_43(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            tt.setReturnType(t.image);
            if (jj_2_44(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_45(2)) {
                t = jj_consume_token(NO_ONE);
            } else if (jj_2_46(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            tt.setScopeId(t.image);
            if (jj_2_47(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_48(2)) {
                t = jj_consume_token(NULL);
            } else if (jj_2_49(2)) {
                t = jj_consume_token(NO_ONE);
            } else if (jj_2_50(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            tt.setNamespaceId(t.image);
            if (jj_2_51(2)) {
                t = jj_consume_token(STRING);
            } else if (jj_2_52(2)) {
                t = jj_consume_token(NULL);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            tt.setAccess(t.image);
            if (jj_2_53(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_54(2)) {
                t = jj_consume_token(NULL);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            tt.setIsStatic(t.image);
            if (jj_2_55(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_56(2)) {
                t = jj_consume_token(NULL);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            tt.setIsVirtual(t.image);
            if (jj_2_57(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_58(2)) {
                t = jj_consume_token(ONLY_DECLARED);
            } else if (jj_2_59(2)) {
                t = jj_consume_token(ERROR);
            } else if (jj_2_60(2)) {
                t = jj_consume_token(INIT_NULL_BODY);
            } else if (jj_2_61(2)) {
                t = jj_consume_token(NULL);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            tt.setBodyId(t.image);
            t = jj_consume_token(EOLN);
            tt.addFunction();
            {
                if (true) return false;
            }
        } catch (ParseException e) {
            {
                if (true) return error_recovery(e);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void parseBodyLines() throws ParseException {
        boolean eof = false;
        label_6:
        while (true) {
            if (jj_2_62(2)) {
                ;
            } else {
                break label_6;
            }
            eof = parseBodyLine();
            if (eof) {
                if (true) return;
            }
            currentBodyLine++;
            advanceProgressCounter("bodies");
        }
        jj_consume_token(0);
    }

    final public boolean parseBodyLine() throws ParseException {
        BodyVisitor tt = new DefaultBodyVisitor();
        Token t, t1, t2;
        try {
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setId(new Integer(t.image));
            t = jj_consume_token(STRING);
            t1 = jj_consume_token(INTEGER_NUMBER);
            t2 = jj_consume_token(INTEGER_NUMBER);
            tt.setLocation(t.image, new Integer(t1.image), new Integer(t2.image));
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setPackageId(new Integer(t.image));
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setNoDecisions(new Integer(t.image));
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setNoLoops(new Integer(t.image));
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setNoAnd(new Integer(t.image));
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setNoOr(new Integer(t.image));
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setCyclomaticNumber(new Integer(t.image));
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setNoReturn(new Integer(t.image));
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setNoCatch(new Integer(t.image));
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setMaxNesting(new Integer(t.image));
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setNoStatements(new Integer(t.image));
            t = jj_consume_token(INTEGER_NUMBER);
            tt.setNoCodeLine(new Integer(t.image));
            t = jj_consume_token(EOLN);
            tt.addBody();
            {
                if (true) return false;
            }
        } catch (ParseException e) {
            {
                if (true) return error_recovery(e);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void parseVarsLines() throws ParseException {
        VariableVisitor vv = new DefaultVariableVisitor();
        boolean eof = false;
        label_7:
        while (true) {
            if (jj_2_63(2)) {
                ;
            } else {
                break label_7;
            }
            eof = parseVarsLine(vv);
            if (eof) {
                if (true) return;
            }
            currentVarsLine++;
            advanceProgressCounter("vars");
        }
    }

    final public boolean parseVarsLine(VariableVisitor vv) throws ParseException {
        Token t;
        try {
            if (jj_2_90(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
                vv.setId(new Integer(t.image));
                if (jj_2_64(2)) {
                    t = jj_consume_token(STRING);
                } else if (jj_2_65(2)) {
                    t = jj_consume_token(NULL);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                vv.setFileName(t.image);
                t = jj_consume_token(INTEGER_NUMBER);
                vv.setDeclarationLine(new Integer(t.image));
                if (jj_2_66(2)) {
                    t = jj_consume_token(STRING);
                } else if (jj_2_67(2)) {
                    t = jj_consume_token(NO_NAME);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                vv.setVariableName(t.image);
                t = jj_consume_token(STRING);
                vv.setKindOf(t.image);
                if (jj_2_68(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_69(2)) {
                    t = jj_consume_token(ERROR);
                } else if (jj_2_70(2)) {
                    t = jj_consume_token(NO_ONE);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                vv.setTypeId(t.image);
                if (jj_2_71(2)) {
                    t = jj_consume_token(STRING);
                } else if (jj_2_72(2)) {
                    t = jj_consume_token(NULL);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                vv.setAccess(t.image);
                if (jj_2_73(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_74(2)) {
                    t = jj_consume_token(NULL);
                } else if (jj_2_75(2)) {
                    t = jj_consume_token(ERROR);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                vv.setClassId(t.image);
                if (jj_2_76(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_77(2)) {
                    t = jj_consume_token(NULL);
                } else if (jj_2_78(2)) {
                    t = jj_consume_token(ERROR);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                vv.setBodyId(t.image);
                if (jj_2_79(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_80(2)) {
                    t = jj_consume_token(NULL);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                vv.setPackageId(t.image);
                if (jj_2_81(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_82(2)) {
                    t = jj_consume_token(ERROR);
                } else if (jj_2_83(2)) {
                    t = jj_consume_token(NO_ONE);
                } else if (jj_2_84(2)) {
                    t = jj_consume_token(NULL);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                vv.setNamespaceId(t.image);
                t = jj_consume_token(INTEGER_NUMBER);
                vv.setIsStatic(new Integer(t.image));
                t = jj_consume_token(INTEGER_NUMBER);
                vv.setIsConst(new Integer(t.image));
                if (jj_2_85(2)) {
                    t = jj_consume_token(INTEGER_NUMBER);
                } else if (jj_2_86(2)) {
                    t = jj_consume_token(ERROR);
                } else if (jj_2_87(2)) {
                    t = jj_consume_token(NO_ONE);
                } else if (jj_2_88(2)) {
                    t = jj_consume_token(NULL);
                } else if (jj_2_89(2)) {
                    t = jj_consume_token(NOT_INIT);
                } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                vv.setRefersTo(t.image);
                t = jj_consume_token(EOLN);
                vv.addVariable();
                {
                    if (true) return false;
                }
            } else if (jj_2_91(2)) {
                jj_consume_token(0);
                vv.variablesEOF();
                {
                    if (true) return true;
                }
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (ParseException e) {
            boolean eof = error_recovery(e);
            if (eof) vv.variablesEOF();
            {
                if (true) return eof;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void parseAccessLines() throws ParseException {
        boolean eof = false;
        label_8:
        while (true) {
            if (jj_2_92(2)) {
                ;
            } else {
                break label_8;
            }
            eof = parseAccessLine();
            if (eof) {
                if (true) return;
            }
            currentAccessLine++;
            advanceProgressCounter("accesses");
        }
    }

    final public boolean parseAccessLine() throws ParseException {
        AccessVisitor av = new DefaultAccessVisitor();
        Token t;
        try {
            t = jj_consume_token(INTEGER_NUMBER);
            av.setId(new Integer(t.image));
            if (jj_2_93(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_94(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            av.setBodyId(t.image);
            if (jj_2_95(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_96(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            av.setVarId(t.image);
            t = jj_consume_token(INTEGER_NUMBER);
            av.setCounter(new Integer(t.image));
            t = jj_consume_token(EOLN);
            av.addAccess();
            {
                if (true) return false;
            }
        } catch (ParseException e) {
            {
                if (true) return error_recovery(e);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void parseCallLines() throws ParseException {
        boolean eof = false;
        label_9:
        while (true) {
            if (jj_2_97(2)) {
                ;
            } else {
                break label_9;
            }
            eof = parseCallLine();
            if (eof) {
                if (true) return;
            }
            currentCallLine++;
            advanceProgressCounter("calls");
        }
    }

    final public boolean parseCallLine() throws ParseException {
        CallVisitor cv = new DefaultCallVisitor();
        Token t;
        try {
            t = jj_consume_token(INTEGER_NUMBER);
            cv.setId(new Integer(t.image));
            if (jj_2_98(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_99(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            cv.setBodyId(t.image);
            if (jj_2_100(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_101(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            cv.setFuncId(t.image);
            t = jj_consume_token(INTEGER_NUMBER);
            cv.setCounter(new Integer(t.image));
            t = jj_consume_token(EOLN);
            cv.addCall();
            {
                if (true) return false;
            }
        } catch (ParseException e) {
            {
                if (true) return error_recovery(e);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void parseChainsLines() throws ParseException {
        boolean eof = false;
        label_10:
        while (true) {
            if (jj_2_102(2)) {
                ;
            } else {
                break label_10;
            }
            eof = parseChainsLine();
            if (eof) {
                if (true) return;
            }
            currentChainsLine++;
            advanceProgressCounter("chains");
        }
    }

    final public boolean parseChainsLine() throws ParseException {
        ChainVisitor cv = new DefaultChainVisitor();
        Token t;
        try {
            t = jj_consume_token(INTEGER_NUMBER);
            cv.setId(new Integer(t.image));
            if (jj_2_103(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_104(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            cv.setTemplateInstanceId(t.image);
            if (jj_2_105(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_106(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            cv.setT2TRelationId(t.image);
            t = jj_consume_token(EOLN);
            cv.addChain();
            {
                if (true) return false;
            }
        } catch (ParseException e) {
            {
                if (true) return error_recovery(e);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void parseInhLines() throws ParseException {
        boolean eof = false;
        label_11:
        while (true) {
            if (jj_2_107(2)) {
                ;
            } else {
                break label_11;
            }
            eof = parseInhLine();
            if (eof) {
                if (true) return;
            }
            currentInhLine++;
            advanceProgressCounter("inh");
        }
    }

    final public boolean parseInhLine() throws ParseException {
        InheritanceVisitor iv = new DefaultInheritanceVisitor();
        Token t;
        try {
            t = jj_consume_token(INTEGER_NUMBER);
            iv.setId(new Integer(t.image));
            if (jj_2_108(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_109(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            iv.setDescendentId(t.image);
            if (jj_2_110(2)) {
                t = jj_consume_token(INTEGER_NUMBER);
            } else if (jj_2_111(2)) {
                t = jj_consume_token(ERROR);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            iv.setParentId(t.image);
            if (jj_2_112(2)) {
                t = jj_consume_token(STRING);
            } else if (jj_2_113(2)) {
                t = jj_consume_token(NULL);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
            iv.setAttribute(t.image);
            t = jj_consume_token(INTEGER_NUMBER);
            iv.setDepth(new Integer(t.image));
            t = jj_consume_token(EOLN);
            iv.addInh();
            {
                if (true) return false;
            }
        } catch (ParseException e) {
            {
                if (true) return error_recovery(e);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    final private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    final private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    final private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    final private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    final private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    final private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    final private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    final private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    final private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    final private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    final private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    final private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    final private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    final private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    final private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_16();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    final private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_17();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(16, xla);
        }
    }

    final private boolean jj_2_18(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_18();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(17, xla);
        }
    }

    final private boolean jj_2_19(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_19();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(18, xla);
        }
    }

    final private boolean jj_2_20(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_20();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(19, xla);
        }
    }

    final private boolean jj_2_21(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_21();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(20, xla);
        }
    }

    final private boolean jj_2_22(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_22();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(21, xla);
        }
    }

    final private boolean jj_2_23(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_23();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(22, xla);
        }
    }

    final private boolean jj_2_24(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_24();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(23, xla);
        }
    }

    final private boolean jj_2_25(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_25();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(24, xla);
        }
    }

    final private boolean jj_2_26(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_26();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(25, xla);
        }
    }

    final private boolean jj_2_27(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_27();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(26, xla);
        }
    }

    final private boolean jj_2_28(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_28();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(27, xla);
        }
    }

    final private boolean jj_2_29(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_29();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(28, xla);
        }
    }

    final private boolean jj_2_30(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_30();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(29, xla);
        }
    }

    final private boolean jj_2_31(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_31();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(30, xla);
        }
    }

    final private boolean jj_2_32(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_32();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(31, xla);
        }
    }

    final private boolean jj_2_33(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_33();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(32, xla);
        }
    }

    final private boolean jj_2_34(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_34();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(33, xla);
        }
    }

    final private boolean jj_2_35(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_35();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(34, xla);
        }
    }

    final private boolean jj_2_36(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_36();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(35, xla);
        }
    }

    final private boolean jj_2_37(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_37();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(36, xla);
        }
    }

    final private boolean jj_2_38(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_38();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(37, xla);
        }
    }

    final private boolean jj_2_39(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_39();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(38, xla);
        }
    }

    final private boolean jj_2_40(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_40();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(39, xla);
        }
    }

    final private boolean jj_2_41(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_41();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(40, xla);
        }
    }

    final private boolean jj_2_42(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_42();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(41, xla);
        }
    }

    final private boolean jj_2_43(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_43();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(42, xla);
        }
    }

    final private boolean jj_2_44(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_44();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(43, xla);
        }
    }

    final private boolean jj_2_45(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_45();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(44, xla);
        }
    }

    final private boolean jj_2_46(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_46();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(45, xla);
        }
    }

    final private boolean jj_2_47(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_47();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(46, xla);
        }
    }

    final private boolean jj_2_48(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_48();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(47, xla);
        }
    }

    final private boolean jj_2_49(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_49();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(48, xla);
        }
    }

    final private boolean jj_2_50(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_50();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(49, xla);
        }
    }

    final private boolean jj_2_51(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_51();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(50, xla);
        }
    }

    final private boolean jj_2_52(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_52();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(51, xla);
        }
    }

    final private boolean jj_2_53(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_53();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(52, xla);
        }
    }

    final private boolean jj_2_54(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_54();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(53, xla);
        }
    }

    final private boolean jj_2_55(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_55();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(54, xla);
        }
    }

    final private boolean jj_2_56(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_56();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(55, xla);
        }
    }

    final private boolean jj_2_57(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_57();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(56, xla);
        }
    }

    final private boolean jj_2_58(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_58();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(57, xla);
        }
    }

    final private boolean jj_2_59(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_59();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(58, xla);
        }
    }

    final private boolean jj_2_60(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_60();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(59, xla);
        }
    }

    final private boolean jj_2_61(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_61();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(60, xla);
        }
    }

    final private boolean jj_2_62(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_62();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(61, xla);
        }
    }

    final private boolean jj_2_63(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_63();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(62, xla);
        }
    }

    final private boolean jj_2_64(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_64();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(63, xla);
        }
    }

    final private boolean jj_2_65(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_65();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(64, xla);
        }
    }

    final private boolean jj_2_66(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_66();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(65, xla);
        }
    }

    final private boolean jj_2_67(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_67();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(66, xla);
        }
    }

    final private boolean jj_2_68(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_68();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(67, xla);
        }
    }

    final private boolean jj_2_69(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_69();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(68, xla);
        }
    }

    final private boolean jj_2_70(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_70();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(69, xla);
        }
    }

    final private boolean jj_2_71(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_71();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(70, xla);
        }
    }

    final private boolean jj_2_72(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_72();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(71, xla);
        }
    }

    final private boolean jj_2_73(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_73();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(72, xla);
        }
    }

    final private boolean jj_2_74(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_74();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(73, xla);
        }
    }

    final private boolean jj_2_75(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_75();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(74, xla);
        }
    }

    final private boolean jj_2_76(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_76();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(75, xla);
        }
    }

    final private boolean jj_2_77(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_77();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(76, xla);
        }
    }

    final private boolean jj_2_78(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_78();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(77, xla);
        }
    }

    final private boolean jj_2_79(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_79();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(78, xla);
        }
    }

    final private boolean jj_2_80(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_80();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(79, xla);
        }
    }

    final private boolean jj_2_81(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_81();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(80, xla);
        }
    }

    final private boolean jj_2_82(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_82();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(81, xla);
        }
    }

    final private boolean jj_2_83(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_83();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(82, xla);
        }
    }

    final private boolean jj_2_84(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_84();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(83, xla);
        }
    }

    final private boolean jj_2_85(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_85();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(84, xla);
        }
    }

    final private boolean jj_2_86(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_86();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(85, xla);
        }
    }

    final private boolean jj_2_87(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_87();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(86, xla);
        }
    }

    final private boolean jj_2_88(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_88();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(87, xla);
        }
    }

    final private boolean jj_2_89(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_89();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(88, xla);
        }
    }

    final private boolean jj_2_90(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_90();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(89, xla);
        }
    }

    final private boolean jj_2_91(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_91();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(90, xla);
        }
    }

    final private boolean jj_2_92(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_92();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(91, xla);
        }
    }

    final private boolean jj_2_93(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_93();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(92, xla);
        }
    }

    final private boolean jj_2_94(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_94();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(93, xla);
        }
    }

    final private boolean jj_2_95(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_95();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(94, xla);
        }
    }

    final private boolean jj_2_96(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_96();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(95, xla);
        }
    }

    final private boolean jj_2_97(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_97();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(96, xla);
        }
    }

    final private boolean jj_2_98(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_98();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(97, xla);
        }
    }

    final private boolean jj_2_99(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_99();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(98, xla);
        }
    }

    final private boolean jj_2_100(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_100();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(99, xla);
        }
    }

    final private boolean jj_2_101(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_101();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(100, xla);
        }
    }

    final private boolean jj_2_102(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_102();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(101, xla);
        }
    }

    final private boolean jj_2_103(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_103();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(102, xla);
        }
    }

    final private boolean jj_2_104(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_104();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(103, xla);
        }
    }

    final private boolean jj_2_105(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_105();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(104, xla);
        }
    }

    final private boolean jj_2_106(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_106();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(105, xla);
        }
    }

    final private boolean jj_2_107(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_107();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(106, xla);
        }
    }

    final private boolean jj_2_108(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_108();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(107, xla);
        }
    }

    final private boolean jj_2_109(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_109();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(108, xla);
        }
    }

    final private boolean jj_2_110(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_110();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(109, xla);
        }
    }

    final private boolean jj_2_111(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_111();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(110, xla);
        }
    }

    final private boolean jj_2_112(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_112();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(111, xla);
        }
    }

    final private boolean jj_2_113(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_113();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(112, xla);
        }
    }

    final private boolean jj_3_11() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3R_15() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_33()) {
            jj_scanpos = xsp;
            if (jj_3_34()) {
                jj_scanpos = xsp;
                if (jj_3_35()) return true;
            }
        }
        return false;
    }

    final private boolean jj_3_9() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_105() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_7() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_103() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_101() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_99() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_32() {
        if (jj_3R_15()) return true;
        return false;
    }

    final private boolean jj_3R_21() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_103()) {
            jj_scanpos = xsp;
            if (jj_3_104()) return true;
        }
        return false;
    }

    final private boolean jj_3_5() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_89() {
        if (jj_scan_token(NOT_INIT)) return true;
        return false;
    }

    final private boolean jj_3_31() {
        if (jj_scan_token(0)) return true;
        return false;
    }

    final private boolean jj_3_26() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_22() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_102() {
        if (jj_3R_21()) return true;
        return false;
    }

    final private boolean jj_3_20() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_18() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_16() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_12() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_10() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_8() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_88() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_6() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_4() {
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    final private boolean jj_3_100() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_98() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_96() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_84() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_94() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_30() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_4()) {
            jj_scanpos = xsp;
            if (jj_3_5()) return true;
        }
        return false;
    }

    final private boolean jj_3R_14() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_30()) {
            jj_scanpos = xsp;
            if (jj_3_31()) return true;
        }
        return false;
    }

    final private boolean jj_3R_20() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_98()) {
            jj_scanpos = xsp;
            if (jj_3_99()) return true;
        }
        return false;
    }

    final private boolean jj_3_87() {
        if (jj_scan_token(NO_ONE)) return true;
        return false;
    }

    final private boolean jj_3_3() {
        if (jj_3R_14()) return true;
        return false;
    }

    final private boolean jj_3_97() {
        if (jj_3R_20()) return true;
        return false;
    }

    final private boolean jj_3_83() {
        if (jj_scan_token(NO_ONE)) return true;
        return false;
    }

    final private boolean jj_3_78() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_75() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_70() {
        if (jj_scan_token(NO_ONE)) return true;
        return false;
    }

    final private boolean jj_3_95() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_93() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_86() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3R_13() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    final private boolean jj_3_82() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_80() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_77() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_74() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3R_19() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_93()) {
            jj_scanpos = xsp;
            if (jj_3_94()) return true;
        }
        return false;
    }

    final private boolean jj_3_69() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_2() {
        if (jj_3R_13()) return true;
        return false;
    }

    final private boolean jj_3_92() {
        if (jj_3R_19()) return true;
        return false;
    }

    final private boolean jj_3_61() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_72() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_67() {
        if (jj_scan_token(NO_NAME)) return true;
        return false;
    }

    final private boolean jj_3_65() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_91() {
        if (jj_scan_token(0)) return true;
        return false;
    }

    final private boolean jj_3_85() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_81() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_79() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_76() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_73() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3R_12() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    final private boolean jj_3_71() {
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    final private boolean jj_3_68() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_66() {
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    final private boolean jj_3_64() {
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    final private boolean jj_3_1() {
        if (jj_3R_12()) return true;
        return false;
    }

    final private boolean jj_3_60() {
        if (jj_scan_token(INIT_NULL_BODY)) return true;
        return false;
    }

    final private boolean jj_3_90() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_64()) {
            jj_scanpos = xsp;
            if (jj_3_65()) return true;
        }
        return false;
    }

    final private boolean jj_3R_18() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_90()) {
            jj_scanpos = xsp;
            if (jj_3_91()) return true;
        }
        return false;
    }

    final private boolean jj_3_50() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_63() {
        if (jj_3R_18()) return true;
        return false;
    }

    final private boolean jj_3_59() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_46() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_43() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_49() {
        if (jj_scan_token(NO_ONE)) return true;
        return false;
    }

    final private boolean jj_3_58() {
        if (jj_scan_token(ONLY_DECLARED)) return true;
        return false;
    }

    final private boolean jj_3_56() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_54() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_48() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_45() {
        if (jj_scan_token(NO_ONE)) return true;
        return false;
    }

    final private boolean jj_3_42() {
        if (jj_scan_token(NO_ONE)) return true;
        return false;
    }

    final private boolean jj_3R_17() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    final private boolean jj_3_52() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_62() {
        if (jj_3R_17()) return true;
        return false;
    }

    final private boolean jj_3_35() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_40() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_111() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_109() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_57() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_55() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_113() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_53() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_51() {
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    final private boolean jj_3_47() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_44() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_29() {
        if (jj_scan_token(NOT_INIT)) return true;
        return false;
    }

    final private boolean jj_3_41() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_25() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_37() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_39() {
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    final private boolean jj_3_34() {
        if (jj_scan_token(UNKNOWN)) return true;
        return false;
    }

    final private boolean jj_3_15() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3R_16() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_39()) {
            jj_scanpos = xsp;
            if (jj_3_40()) return true;
        }
        return false;
    }

    final private boolean jj_3_112() {
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    final private boolean jj_3_110() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_108() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_106() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_104() {
        if (jj_scan_token(ERROR)) return true;
        return false;
    }

    final private boolean jj_3_28() {
        if (jj_scan_token(NO_ONE)) return true;
        return false;
    }

    final private boolean jj_3_24() {
        if (jj_scan_token(NO_ONE)) return true;
        return false;
    }

    final private boolean jj_3_38() {
        if (jj_3R_16()) return true;
        return false;
    }

    final private boolean jj_3_14() {
        if (jj_scan_token(NO_ONE)) return true;
        return false;
    }

    final private boolean jj_3R_22() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_108()) {
            jj_scanpos = xsp;
            if (jj_3_109()) return true;
        }
        return false;
    }

    final private boolean jj_3_36() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_33() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    final private boolean jj_3_107() {
        if (jj_3R_22()) return true;
        return false;
    }

    final private boolean jj_3_27() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_23() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_21() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_19() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_17() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    final private boolean jj_3_13() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    public TablesParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    public boolean lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[0];
    static private int[] jj_la1_0;

    static {
        jj_la1_0();
    }

    private static void jj_la1_0() {
        jj_la1_0 = new int[]{};
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[113];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    public TablesParser(java.io.InputStream stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new TablesParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public TablesParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new TablesParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public TablesParser(TablesParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(TablesParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {
    }

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    final private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }

    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    final private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
                int[] oldentry = (int[]) (e.nextElement());
                if (oldentry.length == jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) break;
                }
            }
            if (!exists) jj_expentries.addElement(jj_expentry);
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[15];
        for (int i = 0; i < 15; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 0; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 15; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

    final private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 113; i++) {
            JJCalls p = jj_2_rtns[i];
            do {
                if (p.gen > jj_gen) {
                    jj_la = p.arg;
                    jj_lastpos = jj_scanpos = p.first;
                    switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                        case 1:
                            jj_3_2();
                            break;
                        case 2:
                            jj_3_3();
                            break;
                        case 3:
                            jj_3_4();
                            break;
                        case 4:
                            jj_3_5();
                            break;
                        case 5:
                            jj_3_6();
                            break;
                        case 6:
                            jj_3_7();
                            break;
                        case 7:
                            jj_3_8();
                            break;
                        case 8:
                            jj_3_9();
                            break;
                        case 9:
                            jj_3_10();
                            break;
                        case 10:
                            jj_3_11();
                            break;
                        case 11:
                            jj_3_12();
                            break;
                        case 12:
                            jj_3_13();
                            break;
                        case 13:
                            jj_3_14();
                            break;
                        case 14:
                            jj_3_15();
                            break;
                        case 15:
                            jj_3_16();
                            break;
                        case 16:
                            jj_3_17();
                            break;
                        case 17:
                            jj_3_18();
                            break;
                        case 18:
                            jj_3_19();
                            break;
                        case 19:
                            jj_3_20();
                            break;
                        case 20:
                            jj_3_21();
                            break;
                        case 21:
                            jj_3_22();
                            break;
                        case 22:
                            jj_3_23();
                            break;
                        case 23:
                            jj_3_24();
                            break;
                        case 24:
                            jj_3_25();
                            break;
                        case 25:
                            jj_3_26();
                            break;
                        case 26:
                            jj_3_27();
                            break;
                        case 27:
                            jj_3_28();
                            break;
                        case 28:
                            jj_3_29();
                            break;
                        case 29:
                            jj_3_30();
                            break;
                        case 30:
                            jj_3_31();
                            break;
                        case 31:
                            jj_3_32();
                            break;
                        case 32:
                            jj_3_33();
                            break;
                        case 33:
                            jj_3_34();
                            break;
                        case 34:
                            jj_3_35();
                            break;
                        case 35:
                            jj_3_36();
                            break;
                        case 36:
                            jj_3_37();
                            break;
                        case 37:
                            jj_3_38();
                            break;
                        case 38:
                            jj_3_39();
                            break;
                        case 39:
                            jj_3_40();
                            break;
                        case 40:
                            jj_3_41();
                            break;
                        case 41:
                            jj_3_42();
                            break;
                        case 42:
                            jj_3_43();
                            break;
                        case 43:
                            jj_3_44();
                            break;
                        case 44:
                            jj_3_45();
                            break;
                        case 45:
                            jj_3_46();
                            break;
                        case 46:
                            jj_3_47();
                            break;
                        case 47:
                            jj_3_48();
                            break;
                        case 48:
                            jj_3_49();
                            break;
                        case 49:
                            jj_3_50();
                            break;
                        case 50:
                            jj_3_51();
                            break;
                        case 51:
                            jj_3_52();
                            break;
                        case 52:
                            jj_3_53();
                            break;
                        case 53:
                            jj_3_54();
                            break;
                        case 54:
                            jj_3_55();
                            break;
                        case 55:
                            jj_3_56();
                            break;
                        case 56:
                            jj_3_57();
                            break;
                        case 57:
                            jj_3_58();
                            break;
                        case 58:
                            jj_3_59();
                            break;
                        case 59:
                            jj_3_60();
                            break;
                        case 60:
                            jj_3_61();
                            break;
                        case 61:
                            jj_3_62();
                            break;
                        case 62:
                            jj_3_63();
                            break;
                        case 63:
                            jj_3_64();
                            break;
                        case 64:
                            jj_3_65();
                            break;
                        case 65:
                            jj_3_66();
                            break;
                        case 66:
                            jj_3_67();
                            break;
                        case 67:
                            jj_3_68();
                            break;
                        case 68:
                            jj_3_69();
                            break;
                        case 69:
                            jj_3_70();
                            break;
                        case 70:
                            jj_3_71();
                            break;
                        case 71:
                            jj_3_72();
                            break;
                        case 72:
                            jj_3_73();
                            break;
                        case 73:
                            jj_3_74();
                            break;
                        case 74:
                            jj_3_75();
                            break;
                        case 75:
                            jj_3_76();
                            break;
                        case 76:
                            jj_3_77();
                            break;
                        case 77:
                            jj_3_78();
                            break;
                        case 78:
                            jj_3_79();
                            break;
                        case 79:
                            jj_3_80();
                            break;
                        case 80:
                            jj_3_81();
                            break;
                        case 81:
                            jj_3_82();
                            break;
                        case 82:
                            jj_3_83();
                            break;
                        case 83:
                            jj_3_84();
                            break;
                        case 84:
                            jj_3_85();
                            break;
                        case 85:
                            jj_3_86();
                            break;
                        case 86:
                            jj_3_87();
                            break;
                        case 87:
                            jj_3_88();
                            break;
                        case 88:
                            jj_3_89();
                            break;
                        case 89:
                            jj_3_90();
                            break;
                        case 90:
                            jj_3_91();
                            break;
                        case 91:
                            jj_3_92();
                            break;
                        case 92:
                            jj_3_93();
                            break;
                        case 93:
                            jj_3_94();
                            break;
                        case 94:
                            jj_3_95();
                            break;
                        case 95:
                            jj_3_96();
                            break;
                        case 96:
                            jj_3_97();
                            break;
                        case 97:
                            jj_3_98();
                            break;
                        case 98:
                            jj_3_99();
                            break;
                        case 99:
                            jj_3_100();
                            break;
                        case 100:
                            jj_3_101();
                            break;
                        case 101:
                            jj_3_102();
                            break;
                        case 102:
                            jj_3_103();
                            break;
                        case 103:
                            jj_3_104();
                            break;
                        case 104:
                            jj_3_105();
                            break;
                        case 105:
                            jj_3_106();
                            break;
                        case 106:
                            jj_3_107();
                            break;
                        case 107:
                            jj_3_108();
                            break;
                        case 108:
                            jj_3_109();
                            break;
                        case 109:
                            jj_3_110();
                            break;
                        case 110:
                            jj_3_111();
                            break;
                        case 111:
                            jj_3_112();
                            break;
                        case 112:
                            jj_3_113();
                            break;
                    }
                }
                p = p.next;
            } while (p != null);
        }
        jj_rescan = false;
    }

    final private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
