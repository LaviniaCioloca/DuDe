/* Generated By:JavaCC: Do not edit this line. CDIFParser.java */
package lrg.memoria.importer.cdif;

import lrg.memoria.core.*;
import lrg.memoria.core.Class;
import lrg.memoria.core.Package;
import lrg.memoria.importer.ImporterTools;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.lang.System;
import java.util.Enumeration;
import java.util.Hashtable;

public class CDIFParser implements CDIFParserConstants {

    private FileInputStream cdifFile;
    private String cdifFileName;

    private static Class currentClass, classScope;
    private static Package packageScope;
    private static Namespace namespaceScope;
    private static Method currentMethod, methodScope;
    private static Body bodyScope;
    private static Type currentMethodReturnType, dataType;
    private static String currentEntityName;
    private static String currentEntityUniqueName;
    private static String currentEntityFileName;
    private static String subClassUniqueName, superClassUniqueName;
    private static Location currentEntityLocation;
    private static boolean currentEntityIsAbstract, currentEntityIsFinal;
    private static boolean currentClassIsInterface, currentEntityIsStatic;
    private static boolean currentLocalVarIsBlock;
    private static boolean currentParameterIsExParam;
    private static int currentEntityStatute, currentEntityAccessMode;
    private static int currentEntityStartLine, currentEntityStartChar;
    private static int currentEntityEndLine, currentEntityEndChar, currentNumber;
    private static int currentMethodKindOf, currentParameterPosition;
    private static int currentLOC, currentCYCLO, currentNOS, currentNODec, currentNOCmt, currentNOExc, currentNOExits, currentNOL;
    private static int lazyBodyID = -1;
    private static lrg.memoria.core.System currentSystem;
    private static int currentEntityID;
    private static Hashtable variablesMap = new Hashtable();
    private static Hashtable methodsMap = new Hashtable();
    private static Hashtable classesMap = new Hashtable();
    private static Hashtable packagesMap = new Hashtable();
    private static Hashtable namespacesMap = new Hashtable();
    private static Hashtable bodiesMap = new Hashtable();
    private static Hashtable lazyBodyScopesForClasses = new Hashtable();

    public CDIFParser(String fileName) {
        cdifFileName = fileName;
        currentSystem = new lrg.memoria.core.System(fileName);
        try {
            cdifFile = new FileInputStream(new File(cdifFileName));
        } catch (FileNotFoundException e) {
            java.lang.System.out.println("Error: file " + cdifFileName + " was not found !!");
            java.lang.System.exit(2);
        }


        if (jj_initialized_once) {
            java.lang.System.out.println("ERROR: Second call to constructor of static parser.  You must");
            java.lang.System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
            java.lang.System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(cdifFile, 1, 1);
        token_source = new CDIFParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;

        //LOOKAHEAD = 1
        //for (int i = 0; i < 1; i++) jj_la1[i] = -1;

        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public lrg.memoria.core.System parse() throws ParseException {
        //modelBuilder = JAVAModelBuilder.getInstance();
        //modelRepository = DefaultTablesModelRepository.getRepository();
        //cdifVisitor = modelBuilder.getCDIFVisitor();
        //initializeTypes();
        namespacesMap.put(Namespace.ANONYMOUS_NAMESPACE_NAME, Namespace.getAnonymousNamespace());
        java.lang.System.out.print("Parsing file " + cdifFileName);
        parseCDIFFile();
        createLazyLinks();
        return currentSystem;
    }

    private static void createLazyLinks() {
        for (Enumeration en = lazyBodyScopesForClasses.keys(); en.hasMoreElements();) {
            Long bid = (Long) en.nextElement();
            DataAbstraction cls = (DataAbstraction) lazyBodyScopesForClasses.get(bid);
            Body body = (Body) bodiesMap.get(bid);
            cls.setScope(body);
        }
    }

    private static Type addType(String uniqueName) {
        Type tempType = (Type) classesMap.get(uniqueName);
        if (tempType == null) {
            String fullScopableName = uniqueName.substring(uniqueName.lastIndexOf(".") + 1);
            if (fullScopableName.indexOf("$") >= 0)
                tempType = new Class(fullScopableName.substring(fullScopableName.lastIndexOf("$") + 1));
            else
                tempType = new Class(fullScopableName);
            classesMap.put(uniqueName, tempType);
        }
        return tempType;
    }

    private static Type addArrayDecorator(String uniqueName, Type decorated) {
        Type tempType = (Type) classesMap.get(uniqueName);
        if (tempType == null) {
            tempType = new ArrayDecorator(decorated);
            classesMap.put(uniqueName, tempType);
        }
        return tempType;
    }

    private static Primitive addPrimitiveType(String uniqueName) {
        Primitive tempType = (Primitive) classesMap.get(uniqueName);
        if (tempType == null) {
            tempType = new Primitive(uniqueName.substring(uniqueName.lastIndexOf(".") + 1));
            classesMap.put(uniqueName, tempType);
        }
        return tempType;
    }

    private static Method addMethod(String uniqueMethodName) {
        Method tempMethod = (Method) methodsMap.get(uniqueMethodName);
        if (tempMethod == null) {
            String temp = uniqueMethodName.substring(0, uniqueMethodName.indexOf("("));
            tempMethod = new Method(temp.substring(temp.lastIndexOf(".") + 1));
            methodsMap.put(uniqueMethodName, tempMethod);
        }
        return tempMethod;
    }

    static final public void parseCDIFFile() throws ParseException {
        parseHeader();
        jj_consume_token(10);
        label_1:
        while (true) {
            if (jj_2_1(4)) {
                ;
            } else {
                break label_1;
            }
            if (jj_2_2(4)) {
                parsePackage();
            } else if (jj_2_3(4)) {
                parseNamespace();
            } else if (jj_2_4(4)) {
                parsePrimitiveType();
            } else if (jj_2_5(4)) {
                parseClass();
            } else if (jj_2_6(4)) {
                parseArrayDecorator();
            } else if (jj_2_7(4)) {
                parseInitializerBody();
            } else if (jj_2_8(4)) {
                parseInheritanceDefinition();
            } else if (jj_2_9(4)) {
                parseImplementsDefinition();
            } else if (jj_2_10(4)) {
                parseAttribute();
            } else if (jj_2_11(4)) {
                parseMethod();
            } else if (jj_2_12(4)) {
                parseThrowsException();
            } else if (jj_2_13(4)) {
                parseMethodBody();
            } else if (jj_2_14(4)) {
                parseFormalParameter();
            } else if (jj_2_15(4)) {
                parseLocalVariable();
            } else if (jj_2_16(4)) {
                parseAccess();
            } else if (jj_2_17(4)) {
                parseInvocation();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        jj_consume_token(11);
        jj_consume_token(0);
    }

    static final public void parseHeader() throws ParseException {
        jj_consume_token(STRING);
        jj_consume_token(STRING);
        jj_consume_token(STRING);
        jj_consume_token(12);
        jj_consume_token(13);
        jj_consume_token(STRING);
        jj_consume_token(STRING);
        jj_consume_token(14);
        jj_consume_token(15);
        jj_consume_token(16);
        jj_consume_token(17);
        jj_consume_token(STRING);
        jj_consume_token(11);
        jj_consume_token(18);
        jj_consume_token(19);
        jj_consume_token(11);
        jj_consume_token(20);
        jj_consume_token(DATE);
        jj_consume_token(11);
        jj_consume_token(21);
        jj_consume_token(DATE);
        jj_consume_token(11);
        jj_consume_token(22);
        jj_consume_token(STRING);
        jj_consume_token(11);
        jj_consume_token(11);
        jj_consume_token(11);
        jj_consume_token(23);
        jj_consume_token(24);
        jj_consume_token(STRING);
        jj_consume_token(25);
        jj_consume_token(26);
        jj_consume_token(11);
        jj_consume_token(11);
        jj_consume_token(24);
        jj_consume_token(STRING);
        jj_consume_token(25);
        jj_consume_token(27);
        jj_consume_token(11);
        jj_consume_token(11);
        jj_consume_token(11);
    }

    static final public void parsePackage() throws ParseException {
        jj_consume_token(28);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(29);
        jj_consume_token(STRING);
        setName();
        jj_consume_token(11);
        jj_consume_token(30);
        jj_consume_token(INTEGER_NUMBER);
        setStatute();
        jj_consume_token(11);
        jj_consume_token(11);
        packageAdd();
    }

    static void setID() throws ParseException {
        currentEntityID = Integer.parseInt(getToken(0).image);
        classScope = null;
        bodyScope = null;
        packageScope = null;
        namespaceScope = null;
    }

    static void setName() throws ParseException {
        currentEntityName = getToken(0).image;
    }

    static void setStatute() throws ParseException {
        currentEntityStatute = Integer.parseInt(getToken(0).image);
    }

    static void packageAdd() throws ParseException {
        Package pack = new Package(currentEntityName);
        pack.setElementID(new Long(currentEntityID));
        pack.setStatute(currentEntityStatute);
        currentSystem.addPackage(pack);
        packagesMap.put(currentEntityName, pack);
    }

    static final public void parseNamespace() throws ParseException {
        jj_consume_token(31);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(29);
        jj_consume_token(STRING);
        setName();
        jj_consume_token(11);
        jj_consume_token(30);
        jj_consume_token(INTEGER_NUMBER);
        setStatute();
        jj_consume_token(11);
        jj_consume_token(11);
        namespaceAdd();
    }

    static void namespaceAdd() throws ParseException {
        Namespace nsp = new Namespace(currentEntityName);
        nsp.setElementID(new Long(currentEntityID));
        nsp.setStatute(currentEntityStatute);
        currentSystem.addNamespace(nsp);
        namespacesMap.put(currentEntityName, nsp);
    }

    static final public void parsePrimitiveType() throws ParseException {
        jj_consume_token(32);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(29);
        jj_consume_token(STRING);
        setName();
        jj_consume_token(11);
        jj_consume_token(33);
        jj_consume_token(STRING);
        setUniqueName();
        jj_consume_token(11);
        jj_consume_token(34);
        jj_consume_token(STRING);
        classBelongsToNamespace();
        jj_consume_token(11);
        jj_consume_token(11);
        primitiveAdd();
    }

    static void primitiveAdd() throws ParseException {
        Primitive pr = addPrimitiveType(currentEntityUniqueName);
        pr.setElementID(new Long(currentEntityID));
        Namespace.getGlobalNamespace().addType(pr);
    }

    static final public void parseClass() throws ParseException {
        jj_consume_token(35);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(29);
        if (jj_2_18(4)) {
            jj_consume_token(INNER_CLASS_NAME);
        } else if (jj_2_19(4)) {
            jj_consume_token(STRING);
        } else if (jj_2_20(4)) {
            jj_consume_token(INTEGER_NUMBER);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        setName();
        jj_consume_token(11);
        jj_consume_token(33);
        jj_consume_token(STRING);
        setUniqueName();
        jj_consume_token(11);
        jj_consume_token(36);
        jj_consume_token(STRING);
        classBelongsToPackage();
        jj_consume_token(11);
        jj_consume_token(34);
        jj_consume_token(STRING);
        classBelongsToNamespace();
        jj_consume_token(11);
        label_2:
        while (true) {
            if (jj_2_21(4)) {
                ;
            } else {
                break label_2;
            }
            jj_consume_token(37);
            jj_consume_token(STRING);
            belongsToClass();
            jj_consume_token(11);
        }
        label_3:
        while (true) {
            if (jj_2_22(4)) {
                ;
            } else {
                break label_3;
            }
            jj_consume_token(38);
            jj_consume_token(INTEGER_NUMBER);
            belongsToBody();
            jj_consume_token(11);
        }
        jj_consume_token(39);
        jj_consume_token(STRING);
        setFileName();
        jj_consume_token(11);
        jj_consume_token(40);
        jj_consume_token(INTEGER_NUMBER);
        setStartLine();
        jj_consume_token(11);
        jj_consume_token(41);
        jj_consume_token(INTEGER_NUMBER);
        setStartChar();
        jj_consume_token(11);
        jj_consume_token(42);
        jj_consume_token(INTEGER_NUMBER);
        setEndLine();
        jj_consume_token(11);
        jj_consume_token(43);
        jj_consume_token(INTEGER_NUMBER);
        setEndChar();
        jj_consume_token(11);
        jj_consume_token(44);
        jj_consume_token(STRING);
        isAbstract();
        jj_consume_token(11);
        jj_consume_token(45);
        jj_consume_token(STRING);
        isFinal();
        jj_consume_token(11);
        jj_consume_token(46);
        jj_consume_token(STRING);
        isStatic();
        jj_consume_token(11);
        jj_consume_token(47);
        jj_consume_token(STRING);
        classIsInterface();
        jj_consume_token(11);
        jj_consume_token(30);
        jj_consume_token(INTEGER_NUMBER);
        setStatute();
        jj_consume_token(11);
        jj_consume_token(48);
        jj_consume_token(INTEGER_NUMBER);
        setAccessMode();
        jj_consume_token(11);
        jj_consume_token(11);
        classAdd();
    }

    static void setUniqueName() throws ParseException {
        currentEntityUniqueName = getToken(0).image;
    }

    static void classBelongsToPackage() throws ParseException {
        String packageName = getToken(0).image;
        packageScope = (Package) packagesMap.get(packageName);
    }

    static void classBelongsToNamespace() throws ParseException {
        String namespaceName = getToken(0).image;
        namespaceScope = (Namespace) namespacesMap.get(namespaceName);
    }

    static void belongsToClass() throws ParseException {
        String classUniqueName = getToken(0).image;
        classScope = (Class) addType(classUniqueName);
    }

    static void belongsToBody() throws ParseException {
        lazyBodyID = Integer.parseInt(getToken(0).image);
    }

    static void isAbstract() throws ParseException {
        String isAbstract = getToken(0).image;
        if (isAbstract.indexOf("FALSE") > 0)
            currentEntityIsAbstract = false;
        else
            currentEntityIsAbstract = true;
    }

    static void isFinal() throws ParseException {
        String isFinal = getToken(0).image;
        if (isFinal.indexOf("FALSE") > 0)
            currentEntityIsFinal = false;
        else
            currentEntityIsFinal = true;
    }

    static void isStatic() throws ParseException {
        String isStatic = getToken(0).image;
        if (isStatic.indexOf("FALSE") > 0)
            currentEntityIsStatic = false;
        else
            currentEntityIsStatic = true;
    }

    static void classIsInterface() throws ParseException {
        String isInterface = getToken(0).image;
        if (isInterface.indexOf("FALSE") > 0)
            currentClassIsInterface = false;
        else
            currentClassIsInterface = true;
    }

    static void setAccessMode() throws ParseException {
        currentEntityAccessMode = Integer.parseInt(getToken(0).image);
    }

    static void setFileName() throws ParseException {
        currentEntityFileName = getToken(0).image;
    }

    static void setStartLine() throws ParseException {
        currentEntityStartLine = Integer.parseInt(getToken(0).image);
    }

    static void setStartChar() throws ParseException {
        currentEntityStartChar = Integer.parseInt(getToken(0).image);
    }

    static void setEndLine() throws ParseException {
        currentEntityEndLine = Integer.parseInt(getToken(0).image);
    }

    static void setEndChar() throws ParseException {
        currentEntityEndChar = Integer.parseInt(getToken(0).image);
        currentEntityLocation = new Location(new lrg.memoria.core.File(ImporterTools.getPathName(currentEntityFileName), ImporterTools.getFileName(currentEntityFileName)));
        currentEntityLocation.setStartLine(currentEntityStartLine);
        currentEntityLocation.setStartChar(currentEntityStartChar);
        currentEntityLocation.setEndLine(currentEntityEndLine);
        currentEntityLocation.setEndChar(currentEntityEndChar);
    }

    static void classAdd() throws ParseException {
        currentClass = (Class) addType(currentEntityUniqueName);
        currentClass.setElementID(new Long(currentEntityID));
        packageScope.addType(currentClass);
        currentClass.setPackage(packageScope);
        namespaceScope.addType(currentClass);
        currentClass.setScope(namespaceScope);
        if (classScope != null)
            currentClass.setScope(classScope);
        if (currentEntityIsAbstract)
            currentClass.setAbstract();
        if (currentEntityIsFinal)
            currentClass.setFinal();
        if (currentEntityIsStatic)
            currentClass.setStatic();
        if (currentClassIsInterface)
            currentClass.setInterface();
        currentClass.setStatute(currentEntityStatute);
        currentClass.setAccessMode(currentEntityAccessMode);
        currentClass.setLocation(currentEntityLocation);
        if (lazyBodyID >= 0) {
            lazyBodyScopesForClasses.put(new Long(lazyBodyID), currentClass);
            lazyBodyID = -1;
        }
    }

    static final public void parseArrayDecorator() throws ParseException {
        jj_consume_token(49);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(29);
        jj_consume_token(STRING);
        setName();
        jj_consume_token(11);
        jj_consume_token(33);
        jj_consume_token(STRING);
        setUniqueName();
        jj_consume_token(11);
        jj_consume_token(50);
        jj_consume_token(STRING);
        decoratedType();
        jj_consume_token(11);
        jj_consume_token(11);
        arrayDecoratorAdd();
    }

    static void decoratedType() throws ParseException {
        dataType = (Type) classesMap.get(getToken(0).image);
    }

    static void arrayDecoratorAdd() throws ParseException {
        dataType = addArrayDecorator(currentEntityUniqueName, dataType);
        ((ArrayDecorator) dataType).setElementID(new Long(currentEntityID));
    }

    static final public void parseInheritanceDefinition() throws ParseException {
        jj_consume_token(51);
        jj_consume_token(INTEGER_NUMBER);
        jj_consume_token(52);
        jj_consume_token(STRING);
        subClassUniqueName();
        jj_consume_token(11);
        jj_consume_token(53);
        jj_consume_token(STRING);
        superClassUniqueName();
        jj_consume_token(11);
        jj_consume_token(11);
        inheritanceDefinitionAdd();
    }

    static void subClassUniqueName() throws ParseException {
        subClassUniqueName = getToken(0).image;
    }

    static void superClassUniqueName() throws ParseException {
        superClassUniqueName = getToken(0).image;
    }

    static void inheritanceDefinitionAdd() throws ParseException {
        DataAbstraction subClass = (DataAbstraction) addType(subClassUniqueName);
        if (superClassUniqueName.indexOf(lrg.memoria.exporter.cdif.MemoriaCDIFExporter.nullElement) >= 0) {

        } else {
            DataAbstraction superClass = (DataAbstraction) addType(superClassUniqueName);
            subClass.addAncestor(superClass);
            superClass.addDescendant(subClass);
        }
    }

    static final public void parseImplementsDefinition() throws ParseException {
        jj_consume_token(54);
        jj_consume_token(INTEGER_NUMBER);
        jj_consume_token(52);
        jj_consume_token(STRING);
        subClassUniqueName();
        jj_consume_token(11);
        jj_consume_token(55);
        jj_consume_token(STRING);
        superClassUniqueName();
        jj_consume_token(11);
        jj_consume_token(11);
        implementsDefinitionAdd();
    }

    static void implementsDefinitionAdd() throws ParseException {
        Class subClass = (Class) addType(subClassUniqueName);
        DataAbstraction superClass = (DataAbstraction) addType(superClassUniqueName);
        subClass.addInterface(superClass);
        superClass.addDescendant(subClass);
    }

    static final public void parseInitializerBody() throws ParseException {
        jj_consume_token(56);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(57);
        jj_consume_token(STRING);
        belongsToClass();
        jj_consume_token(11);
        jj_consume_token(58);
        jj_consume_token(INTEGER_NUMBER);
        setLOC();
        jj_consume_token(11);
        jj_consume_token(59);
        jj_consume_token(INTEGER_NUMBER);
        setCYCLO();
        jj_consume_token(11);
        jj_consume_token(60);
        jj_consume_token(INTEGER_NUMBER);
        setNOS();
        jj_consume_token(11);
        jj_consume_token(61);
        jj_consume_token(INTEGER_NUMBER);
        setNODec();
        jj_consume_token(11);
        jj_consume_token(62);
        jj_consume_token(INTEGER_NUMBER);
        setNOCmt();
        jj_consume_token(11);
        jj_consume_token(63);
        jj_consume_token(INTEGER_NUMBER);
        setNOExc();
        jj_consume_token(11);
        jj_consume_token(64);
        jj_consume_token(INTEGER_NUMBER);
        setNOExits();
        jj_consume_token(11);
        jj_consume_token(65);
        jj_consume_token(INTEGER_NUMBER);
        setNOL();
        jj_consume_token(11);
        jj_consume_token(11);
        initializerBodyAdd();
    }

    static void setLOC() throws ParseException {
        currentLOC = Integer.parseInt(getToken(0).image);
    }

    static void setCYCLO() throws ParseException {
        currentCYCLO = Integer.parseInt(getToken(0).image);
    }

    static void setNOS() throws ParseException {
        currentNOS = Integer.parseInt(getToken(0).image);
    }

    static void setNODec() throws ParseException {
        currentNODec = Integer.parseInt(getToken(0).image);
    }

    static void setNOCmt() throws ParseException {
        currentNOCmt = Integer.parseInt(getToken(0).image);
    }

    static void setNOExc() throws ParseException {
        currentNOExc = Integer.parseInt(getToken(0).image);
    }

    static void setNOExits() throws ParseException {
        currentNOExits = Integer.parseInt(getToken(0).image);
    }

    static void setNOL() throws ParseException {
        currentNOL = Integer.parseInt(getToken(0).image);
    }

    static void initializerBodyAdd() throws ParseException {
        InitializerBody ib = new InitializerBody(classScope);
        classScope.addInitializer(ib);
        ib.setElementID(new Long(currentEntityID));
        ib.setNumberOfLines(currentLOC);
        ib.setCyclomaticNumber(currentCYCLO);
        ib.setNumberOfStatements(currentNOS);
        ib.setNumberOfDecisions(currentNODec);
        ib.setNumberOfComments(currentNOCmt);
        ib.setNumberOfExceptions(currentNOExc);
        ib.setNumberOfExits(currentNOExits);
        ib.setNumberOfLoops(currentNOL);
        bodiesMap.put(new Long(currentEntityID), ib);
    }

    static final public void parseAttribute() throws ParseException {
        jj_consume_token(66);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(29);
        jj_consume_token(STRING);
        setName();
        jj_consume_token(11);
        jj_consume_token(33);
        jj_consume_token(STRING);
        setUniqueName();
        jj_consume_token(11);
        jj_consume_token(67);
        jj_consume_token(STRING);
        setType();
        jj_consume_token(11);
        jj_consume_token(45);
        jj_consume_token(STRING);
        isFinal();
        jj_consume_token(11);
        jj_consume_token(46);
        jj_consume_token(STRING);
        isStatic();
        jj_consume_token(11);
        jj_consume_token(30);
        jj_consume_token(INTEGER_NUMBER);
        setStatute();
        jj_consume_token(11);
        jj_consume_token(39);
        jj_consume_token(STRING);
        setFileName();
        jj_consume_token(11);
        jj_consume_token(40);
        jj_consume_token(INTEGER_NUMBER);
        setStartLine();
        jj_consume_token(11);
        jj_consume_token(41);
        jj_consume_token(INTEGER_NUMBER);
        setStartChar();
        jj_consume_token(11);
        jj_consume_token(42);
        jj_consume_token(INTEGER_NUMBER);
        setEndLine();
        jj_consume_token(11);
        jj_consume_token(43);
        jj_consume_token(INTEGER_NUMBER);
        setEndChar();
        jj_consume_token(11);
        jj_consume_token(57);
        jj_consume_token(STRING);
        belongsToClass();
        jj_consume_token(11);
        jj_consume_token(48);
        jj_consume_token(INTEGER_NUMBER);
        setAccessMode();
        jj_consume_token(11);
        jj_consume_token(11);
        attributeAdd();
    }

    static void attributeAdd() throws ParseException {
        Attribute currentAttribute = new Attribute(currentEntityName);
        classScope.addAttribute(currentAttribute);
        currentAttribute.setScope(classScope);
        if (currentEntityIsFinal)
            currentAttribute.setFinal();
        if (currentEntityIsStatic)
            currentAttribute.setStatic();
        currentAttribute.setStatute(currentEntityStatute);
        currentAttribute.setLocation(currentEntityLocation);
        currentAttribute.setAccessMode(currentEntityAccessMode);
        variablesMap.put(currentEntityUniqueName, currentAttribute);
    }

    static final public void parseMethod() throws ParseException {
        jj_consume_token(68);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(29);
        jj_consume_token(STRING);
        setName();
        jj_consume_token(11);
        jj_consume_token(33);
        jj_consume_token(UNIQUE_NAME);
        setUniqueName();
        jj_consume_token(11);
        jj_consume_token(39);
        jj_consume_token(STRING);
        setFileName();
        jj_consume_token(11);
        jj_consume_token(40);
        jj_consume_token(INTEGER_NUMBER);
        setStartLine();
        jj_consume_token(11);
        jj_consume_token(41);
        jj_consume_token(INTEGER_NUMBER);
        setStartChar();
        jj_consume_token(11);
        jj_consume_token(42);
        jj_consume_token(INTEGER_NUMBER);
        setEndLine();
        jj_consume_token(11);
        jj_consume_token(43);
        jj_consume_token(INTEGER_NUMBER);
        setEndChar();
        jj_consume_token(11);
        jj_consume_token(57);
        jj_consume_token(STRING);
        belongsToClass();
        jj_consume_token(11);
        label_4:
        while (true) {
            if (jj_2_23(4)) {
                ;
            } else {
                break label_4;
            }
            jj_consume_token(69);
            jj_consume_token(STRING);
            methodReturnType();
            jj_consume_token(11);
        }
        jj_consume_token(48);
        jj_consume_token(INTEGER_NUMBER);
        setAccessMode();
        jj_consume_token(11);
        jj_consume_token(44);
        jj_consume_token(STRING);
        isAbstract();
        jj_consume_token(11);
        jj_consume_token(45);
        jj_consume_token(STRING);
        isFinal();
        jj_consume_token(11);
        jj_consume_token(46);
        jj_consume_token(STRING);
        isStatic();
        jj_consume_token(11);
        jj_consume_token(30);
        jj_consume_token(INTEGER_NUMBER);
        setStatute();
        jj_consume_token(11);
        jj_consume_token(70);
        jj_consume_token(INTEGER_NUMBER);
        methodKindOf();
        jj_consume_token(11);
        jj_consume_token(11);
        methodAdd();
    }

    static void methodReturnType() throws ParseException {
        String currentReturnTypeName = getToken(0).image;
        if (currentReturnTypeName.indexOf(lrg.memoria.exporter.cdif.MemoriaCDIFExporter.nullElement) >= 0) {
            currentMethodReturnType = null;
        } else
            currentMethodReturnType = addType(currentReturnTypeName);
    }

    static void methodKindOf() throws ParseException {
        currentMethodKindOf = Integer.parseInt(getToken(0).image);
    }

    static void methodAdd() throws ParseException {
        Method m = addMethod(currentEntityUniqueName);
        m.setLocation(currentEntityLocation);
        m.setScope(classScope);
        classScope.addMethod(m);
        m.setReturnType(currentMethodReturnType);
        if (currentEntityIsAbstract)
            m.setAbstract();
        if (currentEntityIsFinal)
            m.setFinal();
        if (currentEntityIsStatic)
            m.setStatic();
        m.setStatute(currentEntityStatute);
        m.setAccessMode(currentEntityAccessMode);
        m.setKindOf(currentMethodKindOf);
    }

    static final public void parseThrowsException() throws ParseException {
        jj_consume_token(71);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(72);
        jj_consume_token(UNIQUE_NAME);
        belongsToMethod();
        jj_consume_token(11);
        jj_consume_token(73);
        jj_consume_token(STRING);
        setUniqueName();
        jj_consume_token(11);
        jj_consume_token(11);
        throwsExceptionAdd();
    }

    static void belongsToMethod() throws ParseException {
        String methodName = getToken(0).image;
        methodScope = (Method) methodsMap.get(methodName);
    }

    static void throwsExceptionAdd() throws ParseException {
        Class e = (Class) addType(currentEntityUniqueName);
        methodScope.addException(e);
    }

    static final public void parseMethodBody() throws ParseException {
        jj_consume_token(74);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(57);
        jj_consume_token(UNIQUE_NAME);
        belongsToMethod();
        jj_consume_token(11);
        jj_consume_token(58);
        jj_consume_token(INTEGER_NUMBER);
        setLOC();
        jj_consume_token(11);
        jj_consume_token(59);
        jj_consume_token(INTEGER_NUMBER);
        setCYCLO();
        jj_consume_token(11);
        jj_consume_token(60);
        jj_consume_token(INTEGER_NUMBER);
        setNOS();
        jj_consume_token(11);
        jj_consume_token(61);
        jj_consume_token(INTEGER_NUMBER);
        setNODec();
        jj_consume_token(11);
        jj_consume_token(62);
        jj_consume_token(INTEGER_NUMBER);
        setNOCmt();
        jj_consume_token(11);
        jj_consume_token(63);
        jj_consume_token(INTEGER_NUMBER);
        setNOExc();
        jj_consume_token(11);
        jj_consume_token(64);
        jj_consume_token(INTEGER_NUMBER);
        setNOExits();
        jj_consume_token(11);
        jj_consume_token(65);
        jj_consume_token(INTEGER_NUMBER);
        setNOL();
        jj_consume_token(11);
        jj_consume_token(11);
        methodBodyAdd();
    }

    static void methodBodyAdd() throws ParseException {
        FunctionBody mb = new FunctionBody(methodScope);
        methodScope.setFunctionBody(mb);
        mb.setElementID(new Long(currentEntityID));
        mb.setNumberOfLines(currentLOC);
        mb.setCyclomaticNumber(currentCYCLO);
        mb.setNumberOfStatements(currentNOS);
        mb.setNumberOfDecisions(currentNODec);
        mb.setNumberOfComments(currentNOCmt);
        mb.setNumberOfExceptions(currentNOExc);
        mb.setNumberOfExits(currentNOExits);
        mb.setNumberOfLoops(currentNOL);
        bodiesMap.put(new Long(currentEntityID), mb);
    }

    static final public void parseFormalParameter() throws ParseException {
        jj_consume_token(75);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(29);
        jj_consume_token(STRING);
        setName();
        jj_consume_token(11);
        jj_consume_token(33);
        jj_consume_token(UNIQUE_NAME);
        setUniqueName();
        jj_consume_token(11);
        jj_consume_token(67);
        jj_consume_token(STRING);
        setType();
        jj_consume_token(11);
        jj_consume_token(45);
        jj_consume_token(STRING);
        isFinal();
        jj_consume_token(11);
        jj_consume_token(46);
        jj_consume_token(STRING);
        isStatic();
        jj_consume_token(11);
        jj_consume_token(30);
        jj_consume_token(INTEGER_NUMBER);
        setStatute();
        jj_consume_token(11);
        jj_consume_token(39);
        jj_consume_token(STRING);
        setFileName();
        jj_consume_token(11);
        jj_consume_token(40);
        jj_consume_token(INTEGER_NUMBER);
        setStartLine();
        jj_consume_token(11);
        jj_consume_token(41);
        jj_consume_token(INTEGER_NUMBER);
        setStartChar();
        jj_consume_token(11);
        jj_consume_token(42);
        jj_consume_token(INTEGER_NUMBER);
        setEndLine();
        jj_consume_token(11);
        jj_consume_token(43);
        jj_consume_token(INTEGER_NUMBER);
        setEndChar();
        jj_consume_token(11);
        jj_consume_token(57);
        jj_consume_token(UNIQUE_NAME);
        parameterBelongsTo();
        jj_consume_token(11);
        jj_consume_token(76);
        jj_consume_token(STRING);
        isExParam();
        jj_consume_token(11);
        jj_consume_token(11);
        parameterAdd();
    }

    static void setType() throws ParseException {
        String currentTypeName = getToken(0).image;
        dataType = (Type) classesMap.get(currentTypeName);
    }

    static void parameterBelongsTo() throws ParseException {
        String currentMethodScopeName = getToken(0).image;
        methodScope = (Method) methodsMap.get(currentMethodScopeName);
    }

    static void isExParam() throws ParseException {
        if (getToken(0).image.toUpperCase().indexOf("TRUE") >= 0)
            currentParameterIsExParam = true;
        else
            currentParameterIsExParam = false;
    }

    static void parameterAdd() throws ParseException {
        Parameter par = new Parameter(currentEntityName, dataType, methodScope);
        par.setElementID(new Long(currentEntityID));
        if (currentEntityIsFinal)
            par.setFinal();
        // if (currentEntityIsStatic)
        //   par.setStatic();
        par.setStatute(currentEntityStatute);
        par.setLocation(currentEntityLocation);
        //if (currentParameterIsExParam)
        //  par.setExParam();
        methodScope.addParameter(par);
    }

    static final public void parseLocalVariable() throws ParseException {
        jj_consume_token(77);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(29);
        jj_consume_token(STRING);
        setName();
        jj_consume_token(11);
        jj_consume_token(33);
        jj_consume_token(UNIQUE_NAME);
        setUniqueName();
        jj_consume_token(11);
        jj_consume_token(67);
        jj_consume_token(STRING);
        setType();
        jj_consume_token(11);
        jj_consume_token(45);
        jj_consume_token(STRING);
        isFinal();
        jj_consume_token(11);
        jj_consume_token(46);
        jj_consume_token(STRING);
        isStatic();
        jj_consume_token(11);
        jj_consume_token(30);
        jj_consume_token(INTEGER_NUMBER);
        setStatute();
        jj_consume_token(11);
        jj_consume_token(39);
        jj_consume_token(STRING);
        setFileName();
        jj_consume_token(11);
        jj_consume_token(40);
        jj_consume_token(INTEGER_NUMBER);
        setStartLine();
        jj_consume_token(11);
        jj_consume_token(41);
        jj_consume_token(INTEGER_NUMBER);
        setStartChar();
        jj_consume_token(11);
        jj_consume_token(42);
        jj_consume_token(INTEGER_NUMBER);
        setEndLine();
        jj_consume_token(11);
        jj_consume_token(43);
        jj_consume_token(INTEGER_NUMBER);
        setEndChar();
        jj_consume_token(11);
        jj_consume_token(57);
        jj_consume_token(INTEGER_NUMBER);
        setBodyScope();
        jj_consume_token(11);
        jj_consume_token(78);
        jj_consume_token(STRING);
        isBlock();
        jj_consume_token(11);
        jj_consume_token(11);
        localVarAdd();
    }

    static void setBodyScope() throws ParseException {
        int bodyID = Integer.parseInt(getToken(0).image);
        bodyScope = (Body) bodiesMap.get(new Long(bodyID));
    }

    static void isBlock() throws ParseException {
        if (getToken(0).image.toUpperCase().indexOf("TRUE") >= 0)
            currentLocalVarIsBlock = true;
        else
            currentLocalVarIsBlock = false;
    }

    static void localVarAdd() throws ParseException {
        LocalVariable lv = new LocalVariable(currentEntityName,bodyScope.getCodeStripe());
        lv.setElementID(new Long(currentEntityID));
        //lv.setScope(bodyScope);
        if (currentEntityIsFinal)
            lv.setFinal();
        if (currentEntityIsStatic)
            lv.setStatic();
        lv.setStatute(currentEntityStatute);
        lv.setLocation(currentEntityLocation);
        if (currentLocalVarIsBlock)
            lv.setBlock();
    }

    static final public void parseAccess() throws ParseException {
        jj_consume_token(79);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(33);
        if (jj_2_24(4)) {
            jj_consume_token(UNIQUE_NAME);
        } else if (jj_2_25(4)) {
            jj_consume_token(STRING);
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        setUniqueName();
        jj_consume_token(11);
        jj_consume_token(80);
        jj_consume_token(INTEGER_NUMBER);
        setBodyScope();
        jj_consume_token(11);
        jj_consume_token(81);
        jj_consume_token(INTEGER_NUMBER);
        setNumber();
        jj_consume_token(11);
        jj_consume_token(11);
        accessAdd();
    }

    static void setNumber() throws ParseException {
        currentNumber = Integer.parseInt(getToken(0).image);
    }

    static void accessAdd() throws ParseException {
        Variable var = (Variable) variablesMap.get(currentEntityUniqueName);
        Access acc = new Access(var, bodyScope);
        bodyScope.addAccess(acc);
        acc.setCount(currentNumber);
    }

    static final public void parseInvocation() throws ParseException {
        jj_consume_token(82);
        jj_consume_token(INTEGER_NUMBER);
        setID();
        jj_consume_token(33);
        jj_consume_token(UNIQUE_NAME);
        setUniqueName();
        jj_consume_token(11);
        jj_consume_token(83);
        jj_consume_token(INTEGER_NUMBER);
        setBodyScope();
        jj_consume_token(11);
        jj_consume_token(84);
        jj_consume_token(INTEGER_NUMBER);
        setNumber();
        jj_consume_token(11);
        jj_consume_token(11);
        invocationAdd();
    }

    static void invocationAdd() throws ParseException {
        Method met = (Method) methodsMap.get(currentEntityUniqueName);
        Call call = new Call(met, bodyScope);
        bodyScope.addCall(call);
        call.setCount(currentNumber);
    }

    static final private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    static final private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    static final private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    static final private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    static final private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    static final private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    static final private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    static final private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    static final private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    static final private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    static final private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    static final private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    static final private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    static final private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    static final private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    static final private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_16();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    static final private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_17();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(16, xla);
        }
    }

    static final private boolean jj_2_18(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_18();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(17, xla);
        }
    }

    static final private boolean jj_2_19(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_19();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(18, xla);
        }
    }

    static final private boolean jj_2_20(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_20();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(19, xla);
        }
    }

    static final private boolean jj_2_21(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_21();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(20, xla);
        }
    }

    static final private boolean jj_2_22(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_22();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(21, xla);
        }
    }

    static final private boolean jj_2_23(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_23();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(22, xla);
        }
    }

    static final private boolean jj_2_24(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_24();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(23, xla);
        }
    }

    static final private boolean jj_2_25(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_25();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(24, xla);
        }
    }

    static final private boolean jj_3_20() {
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        return false;
    }

    static final private boolean jj_3_5() {
        if (jj_3R_8()) return true;
        return false;
    }

    static final private boolean jj_3_9() {
        if (jj_3R_12()) return true;
        return false;
    }

    static final private boolean jj_3_23() {
        if (jj_scan_token(69)) return true;
        if (jj_scan_token(STRING)) return true;
        if (jj_scan_token(11)) return true;
        return false;
    }

    static final private boolean jj_3_13() {
        if (jj_3R_16()) return true;
        return false;
    }

    static final private boolean jj_3_19() {
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static final private boolean jj_3R_14() {
        if (jj_scan_token(68)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(29)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static final private boolean jj_3_17() {
        if (jj_3R_20()) return true;
        return false;
    }

    static final private boolean jj_3_4() {
        if (jj_3R_7()) return true;
        return false;
    }

    static final private boolean jj_3R_10() {
        if (jj_scan_token(56)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(57)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static final private boolean jj_3R_16() {
        if (jj_scan_token(74)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(57)) return true;
        if (jj_scan_token(UNIQUE_NAME)) return true;
        return false;
    }

    static final private boolean jj_3R_5() {
        if (jj_scan_token(28)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(29)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static final private boolean jj_3_12() {
        if (jj_3R_15()) return true;
        return false;
    }

    static final private boolean jj_3_8() {
        if (jj_3R_11()) return true;
        return false;
    }

    static final private boolean jj_3_18() {
        if (jj_scan_token(INNER_CLASS_NAME)) return true;
        return false;
    }

    static final private boolean jj_3_16() {
        if (jj_3R_19()) return true;
        return false;
    }

    static final private boolean jj_3R_18() {
        if (jj_scan_token(77)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(29)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static final private boolean jj_3_25() {
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static final private boolean jj_3R_12() {
        if (jj_scan_token(54)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(52)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static final private boolean jj_3_3() {
        if (jj_3R_6()) return true;
        return false;
    }

    static final private boolean jj_3_22() {
        if (jj_scan_token(38)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(11)) return true;
        return false;
    }

    static final private boolean jj_3_11() {
        if (jj_3R_14()) return true;
        return false;
    }

    static final private boolean jj_3R_13() {
        if (jj_scan_token(66)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(29)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static final private boolean jj_3_21() {
        if (jj_scan_token(37)) return true;
        if (jj_scan_token(STRING)) return true;
        if (jj_scan_token(11)) return true;
        return false;
    }

    static final private boolean jj_3R_15() {
        if (jj_scan_token(71)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(72)) return true;
        if (jj_scan_token(UNIQUE_NAME)) return true;
        return false;
    }

    static final private boolean jj_3R_8() {
        if (jj_scan_token(35)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(29)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_18()) {
            jj_scanpos = xsp;
            if (jj_3_19()) {
                jj_scanpos = xsp;
                if (jj_3_20()) return true;
            }
        }
        return false;
    }

    static final private boolean jj_3_24() {
        if (jj_scan_token(UNIQUE_NAME)) return true;
        return false;
    }

    static final private boolean jj_3_15() {
        if (jj_3R_18()) return true;
        return false;
    }

    static final private boolean jj_3_7() {
        if (jj_3R_10()) return true;
        return false;
    }

    static final private boolean jj_3_1() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_2()) {
            jj_scanpos = xsp;
            if (jj_3_3()) {
                jj_scanpos = xsp;
                if (jj_3_4()) {
                    jj_scanpos = xsp;
                    if (jj_3_5()) {
                        jj_scanpos = xsp;
                        if (jj_3_6()) {
                            jj_scanpos = xsp;
                            if (jj_3_7()) {
                                jj_scanpos = xsp;
                                if (jj_3_8()) {
                                    jj_scanpos = xsp;
                                    if (jj_3_9()) {
                                        jj_scanpos = xsp;
                                        if (jj_3_10()) {
                                            jj_scanpos = xsp;
                                            if (jj_3_11()) {
                                                jj_scanpos = xsp;
                                                if (jj_3_12()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3_13()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3_14()) {
                                                            jj_scanpos = xsp;
                                                            if (jj_3_15()) {
                                                                jj_scanpos = xsp;
                                                                if (jj_3_16()) {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_3_17()) return true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    static final private boolean jj_3_2() {
        if (jj_3R_5()) return true;
        return false;
    }

    static final private boolean jj_3R_20() {
        if (jj_scan_token(82)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(33)) return true;
        if (jj_scan_token(UNIQUE_NAME)) return true;
        return false;
    }

    static final private boolean jj_3_10() {
        if (jj_3R_13()) return true;
        return false;
    }

    static final private boolean jj_3R_7() {
        if (jj_scan_token(32)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(29)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static final private boolean jj_3R_11() {
        if (jj_scan_token(51)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(52)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static final private boolean jj_3_6() {
        if (jj_3R_9()) return true;
        return false;
    }

    static final private boolean jj_3_14() {
        if (jj_3R_17()) return true;
        return false;
    }

    static final private boolean jj_3R_19() {
        if (jj_scan_token(79)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(33)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_24()) {
            jj_scanpos = xsp;
            if (jj_3_25()) return true;
        }
        return false;
    }

    static final private boolean jj_3R_6() {
        if (jj_scan_token(31)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(29)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static final private boolean jj_3R_17() {
        if (jj_scan_token(75)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(29)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static final private boolean jj_3R_9() {
        if (jj_scan_token(49)) return true;
        if (jj_scan_token(INTEGER_NUMBER)) return true;
        if (jj_scan_token(29)) return true;
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    static private boolean jj_initialized_once = false;
    static public CDIFParserTokenManager token_source;
    static SimpleCharStream jj_input_stream;
    static public Token token, jj_nt;
    static private int jj_ntk;
    static private Token jj_scanpos, jj_lastpos;
    static private int jj_la;
    static public boolean lookingAhead = false;
    static private boolean jj_semLA;
    static private int jj_gen;
    static final private int[] jj_la1 = new int[0];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;

    static {
        jj_la1_0();
        jj_la1_1();
        jj_la1_2();
    }

    private static void jj_la1_0() {
        jj_la1_0 = new int[]{};
    }

    private static void jj_la1_1() {
        jj_la1_1 = new int[]{};
    }

    private static void jj_la1_2() {
        jj_la1_2 = new int[]{};
    }

    static final private JJCalls[] jj_2_rtns = new JJCalls[25];
    static private boolean jj_rescan = false;
    static private int jj_gc = 0;

    public CDIFParser(java.io.InputStream stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  You must");
            System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new CDIFParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    static public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public CDIFParser(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  You must");
            System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new CDIFParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    static public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public CDIFParser(CDIFParserTokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  You must");
            System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(CDIFParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    static final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {
    }

    static final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    static final private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }

    static final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    static final public Token getToken(int index) {
        Token t = lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    static final private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    static private java.util.Vector jj_expentries = new java.util.Vector();
    static private int[] jj_expentry;
    static private int jj_kind = -1;
    static private int[] jj_lasttokens = new int[100];
    static private int jj_endpos;

    static private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
                int[] oldentry = (int[]) (e.nextElement());
                if (oldentry.length == jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) break;
                }
            }
            if (!exists) jj_expentries.addElement(jj_expentry);
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    static public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[85];
        for (int i = 0; i < 85; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 0; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 85; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    static final public void enable_tracing() {
    }

    static final public void disable_tracing() {
    }

    static final private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 25; i++) {
            JJCalls p = jj_2_rtns[i];
            do {
                if (p.gen > jj_gen) {
                    jj_la = p.arg;
                    jj_lastpos = jj_scanpos = p.first;
                    switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                        case 1:
                            jj_3_2();
                            break;
                        case 2:
                            jj_3_3();
                            break;
                        case 3:
                            jj_3_4();
                            break;
                        case 4:
                            jj_3_5();
                            break;
                        case 5:
                            jj_3_6();
                            break;
                        case 6:
                            jj_3_7();
                            break;
                        case 7:
                            jj_3_8();
                            break;
                        case 8:
                            jj_3_9();
                            break;
                        case 9:
                            jj_3_10();
                            break;
                        case 10:
                            jj_3_11();
                            break;
                        case 11:
                            jj_3_12();
                            break;
                        case 12:
                            jj_3_13();
                            break;
                        case 13:
                            jj_3_14();
                            break;
                        case 14:
                            jj_3_15();
                            break;
                        case 15:
                            jj_3_16();
                            break;
                        case 16:
                            jj_3_17();
                            break;
                        case 17:
                            jj_3_18();
                            break;
                        case 18:
                            jj_3_19();
                            break;
                        case 19:
                            jj_3_20();
                            break;
                        case 20:
                            jj_3_21();
                            break;
                        case 21:
                            jj_3_22();
                            break;
                        case 22:
                            jj_3_23();
                            break;
                        case 23:
                            jj_3_24();
                            break;
                        case 24:
                            jj_3_25();
                            break;
                    }
                }
                p = p.next;
            } while (p != null);
        }
        jj_rescan = false;
    }

    static final private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
