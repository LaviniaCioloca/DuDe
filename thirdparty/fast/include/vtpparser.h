/*********
**********   CONCERTO
**********
**********

Copyright CNET
Commercialise par SEMA GROUP sous licence CNET

**********
Jean-Marc Letteron - 2 juillet 1997
- correction
Jean-Marc Letteron - 4 juin 1997
- la pile des contextes est extensible on utilise _Parser_PushContext
Wael Kombar - 16 juin 1994
- expansion automatique de yysbuf (macro unput) (utilcto/160)
Wael Kombar - 28 mars 1994
- correction de config/102 (entre autres)
Wael Kombar - 19 octobre 1993
- extraction de macrobib.c
*/


#ifndef _UTIL_CTOPARSE_H
#define _UTIL_CTOPARSE_H

#include <tlist.h>
#include <ctoio.h>
#include <vtp.h>

#undef FAST_H_DLL
#define FAST_H_DLL VTPKIT_LIB
#include <fastdll.h>

#ifndef PARSER_BUILD_COORD
#define PARSER_BUILD_COORD  	1
#endif

/* Value to return for tokens not to transmit to yacc */
#define PARSER_VOID_TOKEN   -1

#define CTOPARSER_ERROR		0
#define CTOPARSER_WARNING	1

#define input()	CIO_InputGetChar(yystream)
#define unput(c) CIO_InputUnput(yystream, c)
#define unputString(s) CIO_InputUnputString(yystream, s)


IMPORT GLOBALREF char *yytext;
IMPORT GLOBALREF int yyleng;

IMPORT GLOBALREF int	parser_buildCoord;
IMPORT GLOBALREF TListS _parser_TreeStackS;
IMPORT GLOBALREF TListS _parser_AnnotStack;


typedef struct
{
  CIO_PositionS	pos;
  int	errorCode;
} Parser_ErrorValueS, *Parser_ErrorValueP;

typedef struct
{
  char	    *str;
  CIO_PositionS	startPos, endPos;
} Parser_TokenS, *Parser_TokenP;

#define PARSER_ANNOT_PRE    	0
#define PARSER_ANNOT_POST   	1

#define PARSER_TRUE 	    	1

typedef void (*Parser_AnnotCallbackFunc)(VTP_TreeP tree, VoidP data, int type,
					 CIO_PositionP startPos,
					 CIO_PositionP endPos);

typedef void (*Parser_AnnotFreeFunc)(VoidP data);

typedef void (*Parser_ErrorCallbackFunc)(int code, CIO_PositionP pos);
typedef VTP_TreeP (*Parser_RecoverCallbackFunc)(CIO_PositionP start, CIO_PositionP end, CIO_PositionP error);
     
Exception_Declare(EX_PARSER);

IMPORT GLOBALREF CIO_InputP	yystream;

/* Warning : endPos is of last token, not current */
IMPORT GLOBALREF Parser_TokenS	yytoken;

#define Parser_Push(tree) \
(TList_Push(&_parser_TreeStackS, tree))

#define Parser_Pop() \
     (TList_Pop(&_parser_TreeStackS))

#define Parser_GetGeneric(i) \
     Parser_GetToken(i)->str

#define Parser_CurrentCoord(pos)	\
     _Parser_CurrentCoord(yychar, yylvp, yylve, yylval, pos)

#define Parser_PopUntilToken(tok)	\
     _Parser_PopUntilToken(tok, yychar, yylvp, yylve)
     
#if PARSER_BUILD_COORD
#define Parser_SetCoordYY(tree) \
     _Parser_SetCoordYY(tree, yychar, yylvp, yylve, yylval)
#define Parser_SetCoordNN(tree, nterm1, nterm2) \
     _Parser_SetCoordNN(tree, nterm1, nterm2)
#define Parser_SetCoordNT(tree, nterm1, term2) \
     _Parser_SetCoordNT(tree, nterm1, term2)
#define Parser_SetCoordTN(tree, term1, nterm2) \
     _Parser_SetCoordTN(tree, term1, nterm2)
#define Parser_SetCoordTT(tree, term1, term2) \
     _Parser_SetCoordTT(tree, term1, term2)
#else
#define Parser_SetCoordYY(tree)
#define Parser_SetCoordNN(tree, nterm1, nterm2)
#define Parser_SetCoordNT(tree, nterm1, term2)
#define Parser_SetCoordTN(tree, term1, nterm2)
#define Parser_SetCoordTT(tree, term1, term2)
#endif

#define Parser_Pre(father, son) \
(VTP_TreeAdopt(father, son, 0), father)

#define Parser_Post(father, son) \
(VTP_TreeAdopt(father, son, -1), father)  

/* WK << */
typedef struct
{
  CIO_PositionS	pos;
  int	    	annotStackPtr;
  int	    	treeStackPtr;
  int		yyssPtr;
} Parser_ContextS, *Parser_ContextP;

#define PARSER_CONTEXT_STACK_SIZE   128
#define PARSER_CONTEXT_STACK_INCREMENT   64

IMPORT GLOBALREF Parser_ContextP	parser_ContextStack;
IMPORT GLOBALREF int			parser_ContextStackLen;
IMPORT GLOBALREF Parser_ContextP  	parser_ContextPtr;

#define Parser_PushContext()	    \
 _Parser_PushContext(yychar, yylvp, yylve, yylval, (int *)(yyssp+1) - (int *)(yyss))

#define YY_ACCEPT_ERROR(sp)	\
	((parser_ContextPtr > parser_ContextStack) &&	\
	 (parser_ContextPtr[-1].yyssPtr == ((int *)yyssp) - (int *)yyss))
/** WK : fait sauter trop de trucs
#define YY_ACCEPT_ERROR(sp)	Parser_AcceptErrorContext((int *)yyssp)
int Parser_AcceptErrorContext(int *ssp);
**/

#define Parser_PopContext() 	(parser_ContextPtr--)

#define Parser_Recover()  	_Parser_Recover(PARSER_ERROR_OP, PARSER_RECOVER_CALLBACK, yychar, yylvp, yylve, yylval)

/****
  Possible errors during parsing
  SYNTAX_ERROR is generated by the parser machinery
  LEX_ERROR is given by the programmer, and thus may be refined
  into several sub-errors
  ****/
#define PARSER_SYNTAX_ERROR -1
#define PARSER_LEX_ERROR    -2

#ifndef PARSER_ERROR_CALLBACK
#define PARSER_ERROR_CALLBACK _Parser_ErrorCallback
#endif

#ifndef PARSER_RECOVER_CALLBACK
#define PARSER_RECOVER_CALLBACK _Parser_RecoverCallback
#endif

#define yyerror(s)  Parser_SyntaxError(PARSER_ERROR_CALLBACK, yychar, yylvp, yylve, yylval)

IMPORT void
_Parser_ErrorCallback(int code, CIO_PositionP pos);

IMPORT VTP_TreeP
_Parser_Recover(VTP_OperatorP errorOp, Parser_RecoverCallbackFunc func,
		int yychar, int *yylvp, int *yylve, int yylval);

IMPORT VTP_TreeP
_Parser_RecoverAbort(VTP_OperatorP errorOp, Parser_RecoverCallbackFunc func);

IMPORT VTP_TreeP
_Parser_RecoverCallback(CIO_PositionP start, CIO_PositionP end, CIO_PositionP error);

/* WK >> */
     
IMPORT int
Parser_PushToken(char *text, int size,
		 CIO_PositionP startPos, CIO_PositionP endPos);

IMPORT Parser_TokenP
Parser_GetToken(int tokenIndex);

IMPORT void
_Parser_CurrentCoord(int yychar, int *yylvp, int *yylve,
		     int yylval, CIO_PositionP pos);

IMPORT void
Parser_SetAnnotCallback(Parser_AnnotCallbackFunc func,
			Parser_AnnotFreeFunc freeFunc,
			VoidP data,
			CIO_PositionP startPos, CIO_PositionP endPos);

IMPORT void
_Parser_PopUntilToken(int tokenIndex,
		      int yychar, int *yylvp, int *yylve);

#define PARSER_ERROR_RECOVER	0
#define PARSER_ERROR_ABORT	1

IMPORT GLOBALREF int	parser_NbrError;
IMPORT GLOBALREF int	_parser_ErrorMode;

#define Parser_SetErrorMode(mode)	(_parser_ErrorMode = mode)
#define Parser_GetErrorMode()		(_parser_ErrorMode)

IMPORT void
Parser_Init(void);

IMPORT void
Parser_Abort(void);

IMPORT void
Parser_TerminateParsing(void);

IMPORT VTP_TreeP
Parser_AtomTreeCreate(VTP_OperatorP op, VTP_AtomTypeP atomType, char *str);

IMPORT void
_Parser_SetCoordYY(VTP_TreeP tree,
		   int yychar, int *yylvp, int *yylve, int yylval);
IMPORT void
_Parser_SetCoordNN(VTP_TreeP tree, VTP_TreeP nterm1, VTP_TreeP nterm2);
IMPORT void
_Parser_SetCoordNT(VTP_TreeP tree, VTP_TreeP nterm1, int nterm);
IMPORT void
_Parser_SetCoordTN(VTP_TreeP tree, int term1, VTP_TreeP nterm2);
IMPORT void
_Parser_SetCoordTT(VTP_TreeP tree, int term1, int term2);


#define Parser_SearchKeyword()	Parser_SearchTable(keywdtab, keywdind, keywdmax)
#define Parser_SearchIKeyword()	Parser_SearchITable(keywdtab, keywdind, keywdmax)
#define Parser_SearchEntry()	Parser_SearchTable(entrytab, entryind, entrymax)

#ifdef STATIC
#define YYSCOPE static
#endif

#define YYLEX_FUNC	Parser_Lex
static int yylex();

#define YYSTYPE		int

#endif /* _UTIL_CTOPARSE_H */
