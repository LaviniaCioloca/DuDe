/* Generated By:JavaCC: Do not edit this line. CDIFParserTokenManager.java */
package lrg.memoria.importer.cdif;


public class CDIFParserTokenManager implements CDIFParserConstants {
    static void CommonTokenAction(Token t) {
        if (t.image.equals("\"\""))
            t.image = "";
    }

    public static java.io.PrintStream debugStream = System.out;

    public static void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active0 & 0x4005000L) != 0L) {
                    jjmatchedKind = 5;
                    return 13;
                }
                if ((active0 & 0x8080000L) != 0L) {
                    jjmatchedKind = 5;
                    return 14;
                }
                if ((active0 & 0x2L) != 0L)
                    return 11;
                return -1;
            case 1:
                if ((active0 & 0x8080000L) != 0L) {
                    if (jjmatchedPos == 0) {
                        jjmatchedKind = 5;
                        jjmatchedPos = 0;
                    }
                    return -1;
                }
                if ((active0 & 0x4005000L) != 0L) {
                    jjmatchedKind = 5;
                    jjmatchedPos = 1;
                    return 13;
                }
                return -1;
            case 2:
                if ((active0 & 0x8080000L) != 0L) {
                    if (jjmatchedPos == 0) {
                        jjmatchedKind = 5;
                        jjmatchedPos = 0;
                    }
                    return -1;
                }
                if ((active0 & 0x4005000L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 5;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                return -1;
            case 3:
                if ((active0 & 0x80000L) != 0L) {
                    if (jjmatchedPos == 0) {
                        jjmatchedKind = 5;
                        jjmatchedPos = 0;
                    }
                    return -1;
                }
                if ((active0 & 0x4005000L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 5;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                return -1;
            case 4:
                if ((active0 & 0x4005000L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 5;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                return -1;
            case 5:
                if ((active0 & 0x5000L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 5;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                return -1;
            case 6:
                if ((active0 & 0x5000L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 5;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                return -1;
            case 7:
                if ((active0 & 0x5000L) != 0L) {
                    if (jjmatchedPos < 1) {
                        jjmatchedKind = 5;
                        jjmatchedPos = 1;
                    }
                    return -1;
                }
                return -1;
            default :
                return -1;
        }
    }

    private static final int jjStartNfa_0(int pos, long active0, long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }

    static private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    static private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static private final int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 34:
                return jjStartNfaWithStates_0(0, 1, 11);
            case 40:
                return jjMoveStringLiteralDfa1_0(0xfffffffff3f78400L, 0x1fffffL);
            case 41:
                return jjStopAtPos(0, 11);
            case 44:
                return jjStopAtPos(0, 13);
            case 48:
                return jjMoveStringLiteralDfa1_0(0x4005000L, 0x0L);
            case 49:
                return jjMoveStringLiteralDfa1_0(0x8080000L, 0x0L);
            default :
                return jjMoveNfa_0(0, 0);
        }
    }

    static private final int jjMoveStringLiteralDfa1_0(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, active1);
            return 1;
        }
        switch (curChar) {
            case 46:
                return jjMoveStringLiteralDfa2_0(active0, 0x8080000L, active1, 0L);
            case 49:
                return jjMoveStringLiteralDfa2_0(active0, 0x4004000L, active1, 0L);
            case 50:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
            case 58:
                return jjMoveStringLiteralDfa2_0(active0, 0x3818400L, active1, 0L);
            case 65:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0x8004L);
            case 67:
                return jjMoveStringLiteralDfa2_0(active0, 0x800000800000000L, active1, 0x40000L);
            case 69:
                return jjMoveStringLiteralDfa2_0(active0, 0x360000L, active1, 0L);
            case 70:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L);
            case 73:
                return jjMoveStringLiteralDfa2_0(active0, 0x148000000000000L, active1, 0L);
            case 76:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x2000L);
            case 77:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x410L);
            case 78:
                return jjMoveStringLiteralDfa2_0(active0, 0xf000000080000000L, active1, 0x3L);
            case 80:
                return jjMoveStringLiteralDfa2_0(active0, 0x110400000L, active1, 0L);
            case 84:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0x30000L);
            case 98:
                return jjMoveStringLiteralDfa2_0(active0, 0x200007400000000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0xc0000000000L, active1, 0x200L);
            case 102:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x80f00000000000L, active1, 0x185000L);
            case 107:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
            case 115:
                return jjMoveStringLiteralDfa2_0(active0, 0x30030040000000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(0, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(0, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, active1);
            return 2;
        }
        switch (curChar) {
            case 46:
                return jjMoveStringLiteralDfa3_0(active0, 0x4005000L, active1, 0L);
            case 48:
                if ((active0 & 0x8000000L) != 0L) {
                    jjmatchedKind = 27;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
            case 72:
                return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
            case 77:
                return jjMoveStringLiteralDfa3_0(active0, 0x800400L, active1, 0L);
            case 79:
                return jjMoveStringLiteralDfa3_0(active0, 0xf400000000000000L, active1, 0x3L);
            case 83:
                return jjMoveStringLiteralDfa3_0(active0, 0x1010000L, active1, 0L);
            case 86:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
            case 89:
                return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0xb0000000L, active1, 0x40000L);
            case 99:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x38000L);
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x204007400000000L, active1, 0x530L);
            case 104:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x40L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa3_0(active0, 0x1880c0200000000L, active1, 0x180000L);
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2800L);
            case 114:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000100000000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0xf00000000000L, active1, 0x5000L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x30040000000L, active1, 0x4L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0x30000000400000L, active1, 0L);
            case 120:
                return jjMoveStringLiteralDfa3_0(active0, 0x360000L, active1, 0x200L);
            case 121:
                return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
            default :
                break;
        }
        return jjStartNfa_0(1, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(1, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, active1);
            return 3;
        }
        switch (curChar) {
            case 48:
                if ((active0 & 0x80000L) != 0L)
                    return jjStopAtPos(3, 19);
                return jjMoveStringLiteralDfa4_0(active0, 0x4005000L, active1, 0L);
            case 65:
                return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
            case 66:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
            case 67:
                if ((active0 & 0x400000000000000L) != 0L)
                    return jjStopAtPos(3, 58);
                return jjMoveStringLiteralDfa4_0(active0, 0x4800000000000000L, active1, 0L);
            case 68:
                return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
            case 69:
                return jjMoveStringLiteralDfa4_0(active0, 0x8000000002808000L, active1, 0x1001L);
            case 70:
                return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
            case 73:
                return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
            case 76:
                if ((active1 & 0x2L) != 0L)
                    return jjStopAtPos(3, 65);
                break;
            case 79:
                return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
            case 83:
                if ((active0 & 0x1000000000000000L) != 0L)
                    return jjStopAtPos(3, 60);
                return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
            case 85:
                return jjMoveStringLiteralDfa4_0(active0, 0x1010000L, active1, 0L);
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x30840000000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa4_0(active0, 0x10000000400000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa4_0(active0, 0x5000010000000L, active1, 0x3a200L);
            case 100:
                return jjMoveStringLiteralDfa4_0(active0, 0xc0000000000L, active1, 0L);
            case 104:
                return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa4_0(active0, 0x100000300000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa4_0(active0, 0x20000f400000000L, active1, 0x40000L);
            case 109:
                return jjMoveStringLiteralDfa4_0(active0, 0xa0000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
            case 112:
                return jjMoveStringLiteralDfa4_0(active0, 0x60000000360000L, active1, 0x8L);
            case 114:
                return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0x880L);
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x534L);
            case 118:
                return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x180000L);
            default :
                break;
        }
        return jjStartNfa_0(2, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(2, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, active1);
            return 4;
        }
        switch (curChar) {
            case 48:
                if ((active0 & 0x4000000L) != 0L)
                    return jjStopAtPos(4, 26);
                return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0L);
            case 53:
                return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L);
            case 65:
                return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
            case 66:
                return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
            case 68:
                return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0L);
            case 76:
                return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
            case 77:
                return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L);
            case 82:
                return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);
            case 84:
                return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
            case 95:
                return jjMoveStringLiteralDfa5_0(active0, 0xc0000000000L, active1, 0L);
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x2000L);
            case 98:
                return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
            case 101:
                if ((active0 & 0x20000000L) != 0L)
                    return jjStopAtPos(4, 29);
                else if ((active1 & 0x8L) != 0L)
                    return jjStopAtPos(4, 67);
                return jjMoveStringLiteralDfa5_0(active0, 0x20a9008080000000L, active1, 0x38200L);
            case 104:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x510L);
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
            case 107:
                return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
            case 108:
                if ((active1 & 0x40000L) != 0L)
                    return jjStopAtPos(4, 82);
                return jjMoveStringLiteralDfa5_0(active0, 0x40000000400000L, active1, 0x4000L);
            case 109:
                return jjMoveStringLiteralDfa5_0(active0, 0x4000000100000000L, active1, 0x800L);
            case 110:
                return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa5_0(active0, 0x204007400360000L, active1, 0x180080L);
            case 113:
                return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa5_0(active0, 0x30000000000L, active1, 0x4L);
            case 115:
                return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa5_0(active0, 0x100400040000000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L);
            case 120:
                return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x1001L);
            default :
                break;
        }
        return jjStartNfa_0(3, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(3, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, active1);
            return 5;
        }
        switch (curChar) {
            case 46:
                return jjMoveStringLiteralDfa6_0(active0, 0x5000L, active1, 0L);
            case 65:
                return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L);
            case 68:
                return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0L);
            case 69:
                return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L);
            case 74:
                return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
            case 77:
                return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
            case 79:
                if ((active0 & 0x800000000000000L) != 0L)
                    return jjStopAtPos(5, 59);
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
            case 80:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
            case 83:
                return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
            case 95:
                return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
            case 97:
                return jjMoveStringLiteralDfa6_0(active0, 0x400010000000L, active1, 0x800L);
            case 99:
                if ((active0 & 0x2000000000000000L) != 0L)
                    return jjStopAtPos(5, 61);
                else if ((active0 & 0x8000000000000000L) != 0L)
                    return jjStopAtPos(5, 63);
                return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x100000L);
            case 101:
                return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0x100000100400000L, active1, 0x5L);
            case 107:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
            case 108:
                return jjMoveStringLiteralDfa6_0(active0, 0x10040000000000L, active1, 0x2000L);
            case 110:
                return jjMoveStringLiteralDfa6_0(active0, 0x200207400000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4510L);
            case 112:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
            case 114:
                return jjMoveStringLiteralDfa6_0(active0, 0xac000000360000L, active1, 0x20L);
            case 115:
                if ((active0 & 0x800000000L) != 0L)
                    return jjStopAtPos(5, 35);
                return jjMoveStringLiteralDfa6_0(active0, 0x1100080000000L, active1, 0x38000L);
            case 116:
                if ((active0 & 0x4000000000000000L) != 0L)
                    return jjStopAtPos(5, 62);
                return jjMoveStringLiteralDfa6_0(active0, 0x830000000000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa6_0(active0, 0x240000000L, active1, 0L);
            case 119:
                return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
            case 121:
                return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(4, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(4, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0, active1);
            return 6;
        }
        switch (curChar) {
            case 45:
                return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
            case 48:
                return jjMoveStringLiteralDfa7_0(active0, 0x5000L, active1, 0L);
            case 65:
                return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0L);
            case 68:
                return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
            case 69:
                return jjMoveStringLiteralDfa7_0(active0, 0x1008000L, active1, 0L);
            case 73:
                return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
            case 76:
                if ((active0 & 0x400L) != 0L)
                    return jjStopAtPos(6, 10);
                break;
            case 86:
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L);
            case 95:
                return jjMoveStringLiteralDfa7_0(active0, 0x30000000000L, active1, 0L);
            case 97:
                return jjMoveStringLiteralDfa7_0(active0, 0x114200000000000L, active1, 0x101000L);
            case 98:
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
            case 99:
                return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0x4000L);
            case 100:
                if ((active1 & 0x10L) != 0L) {
                    jjmatchedKind = 68;
                    jjmatchedPos = 6;
                } else if ((active1 & 0x100L) != 0L)
                    return jjStopAtPos(6, 72);
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
            case 101:
                return jjMoveStringLiteralDfa7_0(active0, 0x800200000000L, active1, 0x80000L);
            case 102:
                if ((active1 & 0x40L) != 0L)
                    return jjStopAtPos(6, 70);
                return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0L);
            case 103:
                return jjMoveStringLiteralDfa7_0(active0, 0x200007410000000L, active1, 0L);
            case 104:
                return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa7_0(active0, 0x8040000000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
            case 109:
                return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0x20L);
            case 112:
                return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L);
            case 115:
                if ((active1 & 0x8000L) != 0L)
                    return jjStopAtPos(6, 79);
                return jjMoveStringLiteralDfa7_0(active0, 0x1000000400000L, active1, 0x30080L);
            case 116:
                return jjMoveStringLiteralDfa7_0(active0, 0x500140360000L, active1, 0x201L);
            default :
                break;
        }
        return jjStartNfa_0(5, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(5, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0, active1);
            return 7;
        }
        switch (curChar) {
            case 48:
                if ((active0 & 0x1000L) != 0L)
                    return jjStopAtPos(7, 12);
                break;
            case 52:
                if ((active0 & 0x4000L) != 0L)
                    return jjStopAtPos(7, 14);
                break;
            case 66:
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
            case 67:
                return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
            case 69:
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L);
            case 77:
                return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0L);
            case 78:
                return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0L);
            case 79:
                return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0L);
            case 80:
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800L);
            case 82:
                if ((active0 & 0x8000L) != 0L)
                    return jjStopAtPos(7, 15);
                return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L);
            case 84:
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
            case 95:
                return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0L);
            case 97:
                return jjMoveStringLiteralDfa8_0(active0, 0x80088080000000L, active1, 0x2000L);
            case 99:
                return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L);
            case 101:
                if ((active0 & 0x10000000L) != 0L)
                    return jjStopAtPos(7, 28);
                else if ((active0 & 0x40000000L) != 0L)
                    return jjStopAtPos(7, 30);
                return jjMoveStringLiteralDfa8_0(active0, 0x42000000360000L, active1, 0x30000L);
            case 104:
                return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa8_0(active0, 0x400100000000L, active1, 0x200L);
            case 107:
                if ((active1 & 0x4000L) != 0L)
                    return jjStopAtPos(7, 78);
                break;
            case 108:
                if ((active0 & 0x200000000000L) != 0L)
                    return jjStopAtPos(7, 45);
                return jjMoveStringLiteralDfa8_0(active0, 0x120010000000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L);
            case 114:
                return jjMoveStringLiteralDfa8_0(active0, 0x900000000000L, active1, 0x1000L);
            case 115:
                if ((active1 & 0x1L) != 0L)
                    return jjStopAtPos(7, 64);
                return jjMoveStringLiteralDfa8_0(active0, 0x210007400000000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa8_0(active0, 0xc000000000000L, active1, 0x100000L);
            case 117:
                return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4L);
            default :
                break;
        }
        return jjStartNfa_0(6, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(6, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0, active1);
            return 8;
        }
        switch (curChar) {
            case 73:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L);
            case 78:
                return jjMoveStringLiteralDfa9_0(active0, 0x2000000L, active1, 0L);
            case 79:
                return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active1, 0L);
            case 84:
                return jjMoveStringLiteralDfa9_0(active0, 0x200007401000000L, active1, 0L);
            case 89:
                if ((active0 & 0x10000L) != 0L)
                    return jjStopAtPos(8, 16);
                break;
            case 97:
                return jjMoveStringLiteralDfa9_0(active0, 0x28100200000000L, active1, 0x1800L);
            case 99:
                if ((active0 & 0x400000000000L) != 0L)
                    return jjStopAtPos(8, 46);
                return jjMoveStringLiteralDfa9_0(active0, 0x82000080000000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L);
            case 101:
                if ((active0 & 0x40000000000L) != 0L)
                    return jjStopAtPos(8, 42);
                return jjMoveStringLiteralDfa9_0(active0, 0x4000000400000L, active1, 0L);
            case 102:
                return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
            case 104:
                return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa9_0(active0, 0x100010000000000L, active1, 0x100000L);
            case 109:
                return jjMoveStringLiteralDfa9_0(active0, 0x1008000000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x600L);
            case 114:
                if ((active0 & 0x80000000000L) != 0L)
                    return jjStopAtPos(8, 43);
                return jjMoveStringLiteralDfa9_0(active0, 0x360000L, active1, 0x2000L);
            case 115:
                if ((active0 & 0x10000000000000L) != 0L)
                    return jjStopAtPos(8, 52);
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L);
            case 116:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4L);
            case 118:
                return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0L);
            case 120:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80L);
            case 121:
                return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20L);
            default :
                break;
        }
        return jjStartNfa_0(7, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(7, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0, active1);
            return 9;
        }
        switch (curChar) {
            case 65:
                return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L);
            case 68:
                return jjMoveStringLiteralDfa10_0(active0, 0x900000L, active1, 0L);
            case 73:
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000L);
            case 78:
                return jjMoveStringLiteralDfa10_0(active0, 0x2020000L, active1, 0L);
            case 84:
                return jjMoveStringLiteralDfa10_0(active0, 0x200000L, active1, 0L);
            case 86:
                return jjMoveStringLiteralDfa10_0(active0, 0x40000L, active1, 0L);
            case 95:
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000L);
            case 97:
                return jjMoveStringLiteralDfa10_0(active0, 0x820000000000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0x80L);
            case 100:
                return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0x400L);
            case 101:
                if ((active0 & 0x80000000L) != 0L)
                    return jjStopAtPos(9, 31);
                else if ((active0 & 0x8000000000L) != 0L)
                    return jjStopAtPos(9, 39);
                else if ((active0 & 0x80000000000000L) != 0L)
                    return jjStopAtPos(9, 55);
                else if ((active1 & 0x4L) != 0L)
                    return jjStopAtPos(9, 66);
                return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000L);
            case 109:
                if ((active1 & 0x1000L) != 0L)
                    return jjStopAtPos(9, 76);
                return jjMoveStringLiteralDfa10_0(active0, 0x200000000L, active1, 0L);
            case 110:
                if ((active1 & 0x80000L) != 0L)
                    return jjStopAtPos(9, 83);
                return jjMoveStringLiteralDfa10_0(active0, 0x8010000000000L, active1, 0x200L);
            case 111:
                if ((active0 & 0x200000000000000L) != 0L) {
                    jjmatchedKind = 57;
                    jjmatchedPos = 9;
                }
                return jjMoveStringLiteralDfa10_0(active0, 0x3007400000000L, active1, 0x100000L);
            case 112:
                return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20L);
            case 114:
                return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0x800L);
            case 115:
                return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0L);
            case 122:
                return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(8, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(8, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, active0, active1);
            return 10;
        }
        switch (curChar) {
            case 66:
                return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L, active1, 0L);
            case 67:
                return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L, active1, 0L);
            case 69:
                return jjMoveStringLiteralDfa11_0(active0, 0x800000L, active1, 0L);
            case 78:
                return jjMoveStringLiteralDfa11_0(active0, 0x400400000L, active1, 0L);
            case 80:
                return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L, active1, 0L);
            case 82:
                return jjMoveStringLiteralDfa11_0(active0, 0x1000000L, active1, 0L);
            case 84:
                return jjMoveStringLiteralDfa11_0(active0, 0x4000100000000L, active1, 0L);
            case 85:
                return jjMoveStringLiteralDfa11_0(active0, 0x2000000L, active1, 0L);
            case 95:
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200L);
            case 97:
                return jjMoveStringLiteralDfa11_0(active0, 0x120000L, active1, 0x2800L);
            case 99:
                return jjMoveStringLiteralDfa11_0(active0, 0x8800000000000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L, active1, 0L);
            case 101:
                if ((active0 & 0x200000000L) != 0L)
                    return jjStopAtPos(10, 33);
                else if ((active0 & 0x10000000000L) != 0L)
                    return jjStopAtPos(10, 40);
                else if ((active1 & 0x20L) != 0L)
                    return jjStopAtPos(10, 69);
                return jjMoveStringLiteralDfa11_0(active0, 0x100000000040000L, active1, 0x80L);
            case 105:
                return jjMoveStringLiteralDfa11_0(active0, 0x200000L, active1, 0L);
            case 110:
                if ((active1 & 0x10000L) != 0L)
                    return jjStopAtPos(10, 80);
                return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x120000L);
            case 114:
                if ((active0 & 0x20000000000L) != 0L)
                    return jjStopAtPos(10, 41);
                return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L, active1, 0L);
            case 115:
                if ((active0 & 0x20000000000000L) != 0L)
                    return jjStopAtPos(10, 53);
                return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0L);
            case 116:
                if ((active0 & 0x100000000000L) != 0L)
                    return jjStopAtPos(10, 44);
                break;
            case 121:
                if ((active1 & 0x400L) != 0L)
                    return jjStopAtPos(10, 74);
                break;
            default :
                break;
        }
        return jjStartNfa_0(9, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(9, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, active0, active1);
            return 11;
        }
        switch (curChar) {
            case 68:
                return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L, active1, 0L);
            case 69:
                return jjMoveStringLiteralDfa12_0(active0, 0x1000000L, active1, 0L);
            case 76:
                if ((active0 & 0x800000L) != 0L)
                    return jjStopAtPos(11, 23);
                break;
            case 77:
                return jjMoveStringLiteralDfa12_0(active0, 0x2000000L, active1, 0L);
            case 97:
                return jjMoveStringLiteralDfa12_0(active0, 0x2001400400000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000L);
            case 101:
                if ((active0 & 0x800000000000L) != 0L)
                    return jjStopAtPos(11, 47);
                else if ((active0 & 0x1000000000000L) != 0L)
                    return jjStopAtPos(11, 48);
                return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L, active1, 0L);
            case 108:
                return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa12_0(active0, 0x220000L, active1, 0x800L);
            case 110:
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200L);
            case 111:
                return jjMoveStringLiteralDfa12_0(active0, 0x4000000000L, active1, 0L);
            case 112:
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80L);
            case 114:
                return jjMoveStringLiteralDfa12_0(active0, 0x100000000040000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000L);
            case 116:
                return jjMoveStringLiteralDfa12_0(active0, 0x100000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000L);
            case 121:
                return jjMoveStringLiteralDfa12_0(active0, 0x4000100000000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(10, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(10, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(11, active0, active1);
            return 12;
        }
        switch (curChar) {
            case 65:
                return jjMoveStringLiteralDfa13_0(active0, 0x1000000L, active1, 0L);
            case 66:
                return jjMoveStringLiteralDfa13_0(active0, 0x100000002000000L, active1, 0L);
            case 68:
                return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000L, active1, 0L);
            case 95:
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000L);
            case 97:
                return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L, active1, 0x200L);
            case 99:
                return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa13_0(active0, 0x4000000000L, active1, 0L);
            case 101:
                if ((active0 & 0x20000L) != 0L)
                    return jjStopAtPos(12, 17);
                else if ((active0 & 0x100000L) != 0L)
                    return jjStopAtPos(12, 20);
                else if ((active0 & 0x200000L) != 0L)
                    return jjStopAtPos(12, 21);
                return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L, active1, 0x800L);
            case 108:
                return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000L);
            case 109:
                return jjMoveStringLiteralDfa13_0(active0, 0x400400000L, active1, 0x20000L);
            case 112:
                return jjMoveStringLiteralDfa13_0(active0, 0x4000100000000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa13_0(active0, 0x40000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L, active1, 0x80L);
            default :
                break;
        }
        return jjStartNfa_0(11, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(11, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(12, active0, active1);
            return 13;
        }
        switch (curChar) {
            case 69:
                return jjMoveStringLiteralDfa14_0(active0, 0x2000000L, active1, 0L);
            case 82:
                return jjMoveStringLiteralDfa14_0(active0, 0x1000000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20000L);
            case 101:
                if ((active0 & 0x400000L) != 0L)
                    return jjStopAtPos(13, 22);
                else if ((active0 & 0x100000000L) != 0L)
                    return jjStopAtPos(13, 32);
                else if ((active0 & 0x4000000000000L) != 0L)
                    return jjStopAtPos(13, 50);
                else if ((active1 & 0x2000L) != 0L)
                    return jjStopAtPos(13, 77);
                return jjMoveStringLiteralDfa14_0(active0, 0x8000400000000L, active1, 0L);
            case 102:
                return jjMoveStringLiteralDfa14_0(active0, 0x40000000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa14_0(active0, 0x40000L, active1, 0x80L);
            case 107:
                return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200L);
            case 110:
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x100000L);
            case 111:
                return jjMoveStringLiteralDfa14_0(active0, 0x102000000000000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa14_0(active0, 0x2000000000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800L);
            case 121:
                if ((active0 & 0x4000000000L) != 0L)
                    return jjStopAtPos(13, 38);
                break;
            default :
                break;
        }
        return jjStartNfa_0(12, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(12, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(13, active0, active1);
            return 14;
        }
        switch (curChar) {
            case 69:
                return jjMoveStringLiteralDfa15_0(active0, 0x1000000L, active1, 0L);
            case 82:
                if ((active0 & 0x2000000L) != 0L)
                    return jjStopAtPos(14, 25);
                break;
            case 97:
                return jjMoveStringLiteralDfa15_0(active0, 0x1000000000L, active1, 0L);
            case 100:
                return jjMoveStringLiteralDfa15_0(active0, 0x100000000000000L, active1, 0L);
            case 101:
                if ((active1 & 0x200L) != 0L)
                    return jjStopAtPos(14, 73);
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20800L);
            case 102:
                return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa15_0(active0, 0x40000000000000L, active1, 0L);
            case 111:
                return jjMoveStringLiteralDfa15_0(active0, 0x40000L, active1, 0x80L);
            case 114:
                if ((active0 & 0x2000000000000L) != 0L)
                    return jjStopAtPos(14, 49);
                break;
            case 115:
                if ((active0 & 0x2000000000L) != 0L)
                    return jjStopAtPos(14, 37);
                return jjMoveStringLiteralDfa15_0(active0, 0x400000000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x100000L);
            default :
                break;
        }
        return jjStartNfa_0(13, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(13, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(14, active0, active1);
            return 15;
        }
        switch (curChar) {
            case 70:
                return jjMoveStringLiteralDfa16_0(active0, 0x1000000L, active1, 0L);
            case 103:
                return jjMoveStringLiteralDfa16_0(active0, 0x1000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000L, active1, 0L);
            case 109:
                return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x100000L);
            case 110:
                if ((active0 & 0x40000L) != 0L)
                    return jjStopAtPos(15, 18);
                else if ((active1 & 0x80L) != 0L)
                    return jjStopAtPos(15, 71);
                return jjMoveStringLiteralDfa16_0(active0, 0x40000000000000L, active1, 0L);
            case 112:
                return jjMoveStringLiteralDfa16_0(active0, 0x400000000L, active1, 0L);
            case 114:
                if ((active1 & 0x800L) != 0L)
                    return jjStopAtPos(15, 75);
                else if ((active1 & 0x20000L) != 0L)
                    return jjStopAtPos(15, 81);
                break;
            case 121:
                if ((active0 & 0x100000000000000L) != 0L)
                    return jjStopAtPos(15, 56);
                break;
            default :
                break;
        }
        return jjStartNfa_0(14, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(14, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(15, active0, active1);
            return 16;
        }
        switch (curChar) {
            case 69:
                return jjMoveStringLiteralDfa17_0(active0, 0x1000000L, active1, 0L);
            case 97:
                return jjMoveStringLiteralDfa17_0(active0, 0x400000000L, active1, 0L);
            case 98:
                return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x100000L);
            case 101:
                if ((active0 & 0x1000000000L) != 0L)
                    return jjStopAtPos(16, 36);
                break;
            case 105:
                return jjMoveStringLiteralDfa17_0(active0, 0x40000000000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(15, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(15, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(16, active0, active1);
            return 17;
        }
        switch (curChar) {
            case 82:
                return jjMoveStringLiteralDfa18_0(active0, 0x1000000L, active1, 0L);
            case 99:
                return jjMoveStringLiteralDfa18_0(active0, 0x400000000L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x100000L);
            case 105:
                return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000L, active1, 0L);
            case 116:
                return jjMoveStringLiteralDfa18_0(active0, 0x40000000000000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(16, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(16, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(17, active0, active1);
            return 18;
        }
        switch (curChar) {
            case 69:
                return jjMoveStringLiteralDfa19_0(active0, 0x1000000L, active1, 0L);
            case 101:
                if ((active0 & 0x400000000L) != 0L)
                    return jjStopAtPos(18, 34);
                break;
            case 105:
                return jjMoveStringLiteralDfa19_0(active0, 0x40000000000000L, active1, 0L);
            case 114:
                if ((active1 & 0x100000L) != 0L)
                    return jjStopAtPos(18, 84);
                break;
            case 116:
                return jjMoveStringLiteralDfa19_0(active0, 0x8000000000000L, active1, 0L);
            default :
                break;
        }
        return jjStartNfa_0(17, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_0(17, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(18, active0, 0L);
            return 19;
        }
        switch (curChar) {
            case 78:
                return jjMoveStringLiteralDfa20_0(active0, 0x1000000L);
            case 105:
                return jjMoveStringLiteralDfa20_0(active0, 0x8000000000000L);
            case 111:
                return jjMoveStringLiteralDfa20_0(active0, 0x40000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(18, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa20_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(18, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(19, active0, 0L);
            return 20;
        }
        switch (curChar) {
            case 67:
                return jjMoveStringLiteralDfa21_0(active0, 0x1000000L);
            case 110:
                if ((active0 & 0x40000000000000L) != 0L)
                    return jjStopAtPos(20, 54);
                break;
            case 111:
                return jjMoveStringLiteralDfa21_0(active0, 0x8000000000000L);
            default :
                break;
        }
        return jjStartNfa_0(19, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa21_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(19, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(20, active0, 0L);
            return 21;
        }
        switch (curChar) {
            case 69:
                if ((active0 & 0x1000000L) != 0L)
                    return jjStopAtPos(21, 24);
                break;
            case 110:
                if ((active0 & 0x8000000000000L) != 0L)
                    return jjStopAtPos(21, 51);
                break;
            default :
                break;
        }
        return jjStartNfa_0(20, active0, 0L);
    }

    static private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    static private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    static private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    static private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    static private final void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static private final int jjMoveNfa_0(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 13;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 11:
                            if (curChar == 34) {
                                if (kind > 7)
                                    kind = 7;
                            }
                            if (curChar == 34) {
                                if (kind > 6)
                                    kind = 6;
                            }
                            break;
                        case 14:
                            if ((0x3ff800000000000L & l) != 0L) {
                                if (kind > 9)
                                    kind = 9;
                                jjCheckNAdd(9);
                            }
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 8)
                                    kind = 8;
                                jjCheckNAdd(7);
                            }
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 5)
                                    kind = 5;
                                jjCheckNAdd(1);
                            }
                            break;
                        case 13:
                            if ((0x3ff800000000000L & l) != 0L) {
                                if (kind > 9)
                                    kind = 9;
                                jjCheckNAdd(9);
                            }
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 5)
                                    kind = 5;
                                jjCheckNAdd(1);
                            }
                            break;
                        case 0:
                            if ((0x3ff200000000000L & l) != 0L) {
                                if (kind > 5)
                                    kind = 5;
                                jjCheckNAdd(1);
                            } else if (curChar == 34)
                                jjAddStates(0, 1);
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 9)
                                    kind = 9;
                                jjCheckNAdd(9);
                            } else if ((0x1000200800000000L & l) != 0L) {
                                if (kind > 6)
                                    kind = 6;
                                jjCheckNAdd(3);
                            }
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 8)
                                    kind = 8;
                                jjCheckNAdd(7);
                            } else if ((0x1000200000000000L & l) != 0L) {
                                if (kind > 7)
                                    kind = 7;
                                jjCheckNAdd(5);
                            }
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAdd(1);
                            break;
                        case 2:
                            if ((0x1000200800000000L & l) == 0L)
                                break;
                            if (kind > 6)
                                kind = 6;
                            jjCheckNAdd(3);
                            break;
                        case 3:
                            if ((0x57fff01000000000L & l) == 0L)
                                break;
                            if (kind > 6)
                                kind = 6;
                            jjCheckNAdd(3);
                            break;
                        case 4:
                            if ((0x1000200000000000L & l) == 0L)
                                break;
                            if (kind > 7)
                                kind = 7;
                            jjCheckNAdd(5);
                            break;
                        case 5:
                            if ((0x57ff731000000000L & l) == 0L)
                                break;
                            if (kind > 7)
                                kind = 7;
                            jjCheckNAdd(5);
                            break;
                        case 6:
                            if ((0x3fe000000000000L & l) == 0L)
                                break;
                            if (kind > 8)
                                kind = 8;
                            jjCheckNAdd(7);
                            break;
                        case 7:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 8)
                                kind = 8;
                            jjCheckNAdd(7);
                            break;
                        case 8:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 9)
                                kind = 9;
                            jjCheckNAdd(9);
                            break;
                        case 9:
                            if ((0x3ff800000000000L & l) == 0L)
                                break;
                            if (kind > 9)
                                kind = 9;
                            jjCheckNAdd(9);
                            break;
                        case 10:
                            if (curChar == 34)
                                jjAddStates(0, 1);
                            break;
                        case 12:
                            if (curChar == 34 && kind > 7)
                                kind = 7;
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        case 14:
                        case 7:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 8)
                                kind = 8;
                            jjCheckNAdd(7);
                            break;
                        case 0:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 7)
                                    kind = 7;
                                jjCheckNAdd(5);
                            }
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 6)
                                    kind = 6;
                                jjCheckNAdd(3);
                            }
                            break;
                        case 2:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 6)
                                kind = 6;
                            jjCheckNAdd(3);
                            break;
                        case 3:
                            if ((0x7fffffebffffffeL & l) == 0L)
                                break;
                            if (kind > 6)
                                kind = 6;
                            jjCheckNAdd(3);
                            break;
                        case 4:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 7)
                                kind = 7;
                            jjCheckNAdd(5);
                            break;
                        case 5:
                            if ((0x7fffffeaffffffeL & l) == 0L)
                                break;
                            if (kind > 7)
                                kind = 7;
                            jjCheckNAdd(5);
                            break;
                        default :
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                MatchLoop: do {
                    switch (jjstateSet[--i]) {
                        default :
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
        11, 12,
    };
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, null, null,
        "\50\72\115\117\104\105\114", "\51", "\60\62\56\60\60\56\60\60", "\54", "\60\61\56\60\65\56\60\64",
        "\50\72\110\105\101\104\105\122", "\50\72\123\125\115\115\101\122\131",
        "\50\105\170\160\157\162\164\145\162\116\141\155\145", "\50\105\170\160\157\162\164\145\162\126\145\162\163\151\157\156",
        "\61\56\60\60", "\50\105\170\160\157\162\164\145\162\104\141\164\145",
        "\50\105\170\160\157\162\164\145\162\124\151\155\145", "\50\120\165\142\154\151\163\150\145\162\116\141\155\145",
        "\50\72\115\105\124\101\55\115\117\104\105\114",
        "\50\72\123\125\102\112\105\103\124\101\122\105\101\122\105\106\105\122\105\116\103\105", "\50\72\126\105\122\123\111\117\116\116\125\115\102\105\122",
        "\60\61\56\60\60", "\61\56\60", "\50\120\141\143\153\141\147\145", "\50\156\141\155\145",
        "\50\163\164\141\164\165\164\145", "\50\116\141\155\145\163\160\141\143\145",
        "\50\120\162\151\155\151\164\151\166\145\124\171\160\145", "\50\165\156\151\161\165\145\116\141\155\145",
        "\50\142\145\154\157\156\147\163\124\157\116\141\155\145\163\160\141\143\145", "\50\103\154\141\163\163",
        "\50\142\145\154\157\156\147\163\124\157\120\141\143\153\141\147\145", "\50\142\145\154\157\156\147\163\124\157\103\154\141\163\163",
        "\50\142\145\154\157\156\147\163\124\157\102\157\144\171", "\50\146\151\154\145\137\156\141\155\145",
        "\50\163\164\141\162\164\137\154\151\156\145", "\50\163\164\141\162\164\137\143\150\141\162",
        "\50\145\156\144\137\154\151\156\145", "\50\145\156\144\137\143\150\141\162",
        "\50\151\163\101\142\163\164\162\141\143\164", "\50\151\163\106\151\156\141\154", "\50\151\163\123\164\141\164\151\143",
        "\50\151\163\111\156\164\145\162\146\141\143\145", "\50\141\143\143\145\163\163\137\155\157\144\145",
        "\50\101\162\162\141\171\104\145\143\157\162\141\164\157\162", "\50\144\145\143\157\162\141\164\145\144\124\171\160\145",
        "\50\111\156\150\145\162\151\164\141\156\143\145\104\145\146\151\156\151\164\151\157\156", "\50\163\165\142\143\154\141\163\163",
        "\50\163\165\160\145\162\143\154\141\163\163",
        "\50\111\155\160\154\145\155\145\156\164\163\104\145\146\151\156\151\164\151\157\156", "\50\151\156\164\145\162\146\141\143\145",
        "\50\111\156\151\164\151\141\154\151\172\145\162\102\157\144\171", "\50\142\145\154\157\156\147\163\124\157", "\50\114\117\103",
        "\50\103\131\103\114\117", "\50\116\117\123", "\50\116\117\104\145\143", "\50\116\117\103\155\164",
        "\50\116\117\105\170\143", "\50\116\117\105\170\151\164\163", "\50\116\117\114",
        "\50\101\164\164\162\151\142\165\164\145", "\50\164\171\160\145", "\50\115\145\164\150\157\144",
        "\50\162\145\164\165\162\156\124\171\160\145", "\50\153\151\156\144\117\146",
        "\50\124\150\162\157\167\163\105\170\143\145\160\164\151\157\156", "\50\155\145\164\150\157\144",
        "\50\145\170\143\145\160\164\151\157\156\137\156\141\155\145", "\50\115\145\164\150\157\144\102\157\144\171",
        "\50\106\157\162\155\141\154\120\141\162\141\155\145\164\145\162", "\50\151\163\105\170\120\141\162\141\155",
        "\50\114\157\143\141\154\126\141\162\151\141\142\154\145", "\50\151\163\102\154\157\143\153", "\50\101\143\143\145\163\163",
        "\50\141\143\143\145\163\163\145\144\111\156", "\50\141\143\143\145\163\163\145\163\137\156\165\155\142\145\162",
        "\50\103\141\154\154", "\50\151\156\166\157\153\145\144\111\156",
        "\50\151\156\166\157\143\141\164\151\157\156\163\137\156\165\155\142\145\162", };
    public static final String[] lexStateNames = {
        "DEFAULT",
    };
    static final long[] jjtoToken = {
        0xffffffffffffffe1L, 0x1fffffL,
    };
    static final long[] jjtoSkip = {
        0x1eL, 0x0L,
    };
    static protected SimpleCharStream input_stream;
    static private final int[] jjrounds = new int[13];
    static private final int[] jjstateSet = new int[26];
    static protected char curChar;

    public CDIFParserTokenManager(SimpleCharStream stream) {
        if (input_stream != null)
            throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
        input_stream = stream;
    }

    public CDIFParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    static public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    static private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 13; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    static public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    static public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    static protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    static int curLexState = 0;
    static int defaultLexState = 0;
    static int jjnewStateCnt;
    static int jjround;
    static int jjmatchedPos;
    static int jjmatchedKind;

    public static Token getNextToken() {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop :
        for (; ;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                CommonTokenAction(matchedToken);
                return matchedToken;
            }

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    CommonTokenAction(matchedToken);
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

}
